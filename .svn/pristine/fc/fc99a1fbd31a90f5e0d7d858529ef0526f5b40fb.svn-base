using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Configuration;
using FastReport;
using System.Text.RegularExpressions;

namespace BCS
{
    public partial class frmStpCrewBonus : Form
    {
        public frmStpCrewBonus()
        {
            InitializeComponent();
        }

        private void Close1Btn_Click(object sender, EventArgs e)
        {
            Close();
        }

        string UseTable = "";

        


        Report report = new Report();

        private void frmStpCrewBonus_Load(object sender, EventArgs e)
        {
            ProdMonthTxt.Text = Convert.ToString(SysSettings.ProdMonth);
            Procedures procs = new Procedures();
            procs.ProdMonthVis(Convert.ToInt32(ProdMonthTxt.Text));
            ProdMonth1Txt.Text = Procedures.Prod2;
            ProdMonth1Txt.TextAlign = HorizontalAlignment.Center;


           

        }

        private void ProdMonthTxt_Click(object sender, EventArgs e)
        {
            Procedures procs = new Procedures();
            procs.ProdMonthCalc(Convert.ToInt32(ProdMonthTxt.Text));
            ProdMonthTxt.Text = Procedures.Prod.ToString();
            procs.ProdMonthVis(Convert.ToInt32(ProdMonthTxt.Text));
            ProdMonth1Txt.Text = Procedures.Prod2;
        }

        public void LoadListBoxes()
        {
            //
            // Do 'Stoping'
            //
            #region
            if (rdbStoping.Checked == true)
            {
                //
                //  Load Incomplete List Box
                //
                lbIncomplete.Items.Clear();

                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = "select distinct(orgunit) wp from NorthamPas.dbo.survey \r\n "+
                                      "where activitycode = 0 and prodmonth = '"+ProdMonthTxt.Value+"' \r\n "+
                                      "and orgunit not in (select gang from BonusControl.dbo.BMCS_New_Status where prodmonth = '" + ProdMonthTxt.Value + "' and activity = 'S') \r\n " +
                                      "and orgunit not in (select distinct(orgunit) orgunit from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '0') \r\n " +
                                      "and orgunit not like '" + "______R" + "%' and orgunit not like '____T%' and SUBSTRING([OrgUnit], 7,1) <> 'Q' and SUBSTRING([OrgUnit], 7,1) <> 'D' \r\n " +
                                      "order by orgunit ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Stoping";
                _dbMan.ExecuteInstruction();

                DataTable dt = _dbMan.ResultsDataTable;

                lbIncomplete.Items.Add("");
                foreach (DataRow dr in dt.Rows)
                {
                    lbIncomplete.Items.Add(dr["wp"].ToString());
                }

                //
                //Load Printed Listbox
                //
                lbPrinted.Items.Clear();

                MWDataManager.clsDataAccess _dbMan1 = new MWDataManager.clsDataAccess();
                _dbMan1.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan1.SqlStatement = "select gang from BonusControl.dbo.BMCS_New_Status where prodmonth = '" + ProdMonthTxt.Value + "' and activity = 'S' \r\n " +
                                       "and gang not in (select distinct(orgunit) orgunit from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew  \r\n "+
                                       "where prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '0') \r\n " +
                                       "and gang not like '" + "______R" + "%' and gang not like '" + "_______Z" + "' and gang not like '____T%' and SUBSTRING([gang], 7,1) <> 'Q' and SUBSTRING([gang], 7,1) <> 'D' \r\n " +
                                       "order by gang ";
                _dbMan1.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan1.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan1.ExecuteInstruction();

                DataTable dt1 = _dbMan1.ResultsDataTable;

                lbPrinted.Items.Add("");
                foreach (DataRow dr1 in dt1.Rows)
                {
                    lbPrinted.Items.Add(dr1["gang"].ToString());
                }

                //
                //Load Transferred Listbox
                //
                lbTransfer.Items.Clear();

                MWDataManager.clsDataAccess _dbMan2 = new MWDataManager.clsDataAccess();
                _dbMan2.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan2.SqlStatement = "select orgunit, max(transferred) trans from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew \r\n "+
                                       "where prodmonth = '"+ProdMonthTxt.Value+"' and activitycode = '0' \r\n "+
                                       "and orgunit not like '" + "______R" + "%' and orgunit not like '" + "_______Z" + "' and orgunit not like '____T%' and SUBSTRING([OrgUnit], 7,1) <> 'Q' and SUBSTRING([OrgUnit], 7,1) <> 'D' \r\n " +
                                       "and shift = 'D' and activitycode = 0 and type = '28'  \r\n " +
                                       "group by orgunit order by orgunit ";
                _dbMan2.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan2.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan2.ExecuteInstruction();

                DataTable dt2 = _dbMan2.ResultsDataTable;

                lbTransfer.Items.Add("");
                foreach (DataRow dr2 in dt2.Rows)
                {
                    lbTransfer.Items.Add(dr2["orgunit"].ToString());
                }
            }
            #endregion

            //
            // Do 'R Crews'
            //
            #region


            #endregion

            //
            // Do 'Z-Crew'
            //
            #region
            if (rdbZCrew.Checked == true)
            {
                //
                //  Load Incomplete List Box
                //
                lbIncomplete.Items.Clear();

                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                 _dbMan.SqlStatement = _dbMan.SqlStatement + "  select * from (  ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " select * from (select case when LEN(OrgunitDS) > 8 then (substring(orgunitds,1,8) + 'Z' ) else (substring(orgunitds,1,7) + 'Z' ) end as aa from BMCS_ZGangAverageNew ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where prodmonth = '"+ProdMonthTxt.Value+"' ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " ) a where aa not in (select gang from BMCS_New_Status where prodmonth = '" + ProdMonthTxt.Value + "' and activity = 'S') ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and aa not in (select distinct(orgunit) orgunit from BMCS_ARMS_Interface_Transfernew where ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '0'))qwerty  group by aa order by aa ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "ZCrew";
                _dbMan.ExecuteInstruction();


               
                DataTable dt = _dbMan.ResultsDataTable;

                lbIncomplete.Items.Add("");
                foreach (DataRow dr in dt.Rows)
                {
                    lbIncomplete.Items.Add(dr["aa"].ToString());
                }

                //
                //Load Printed Listbox
                //
                lbPrinted.Items.Clear();

                MWDataManager.clsDataAccess _dbMan1 = new MWDataManager.clsDataAccess();
                _dbMan1.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " select gang from BonusControl.dbo.BMCS_New_Status where prodmonth = '" + ProdMonthTxt.Value + "'  and activity = 'S' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and (gang like '" + "_______Z" + "' or gang like '" + "________Z" + "') and gang not in (select distinct(orgunit) orgunit from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '0') ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " order by gang ";
                _dbMan1.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan1.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan1.ExecuteInstruction();

                DataTable dt1 = _dbMan1.ResultsDataTable;

                lbPrinted.Items.Add("");
                foreach (DataRow dr1 in dt1.Rows)
                {
                    lbPrinted.Items.Add(dr1["gang"].ToString());
                }

                //
                //Load Transferred Listbox
                //
                lbTransfer.Items.Clear();

                MWDataManager.clsDataAccess _dbMan2 = new MWDataManager.clsDataAccess();
                _dbMan2.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select orgunit, max(transferred) trans from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '0' ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and (orgunit like '" + "_______Z" + "' or orgunit like '" + "________Z" + "') and shift = 'D' and activitycode = '0' group by orgunit order by orgunit ";
                _dbMan2.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan2.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan2.ExecuteInstruction();

                DataTable dt2 = _dbMan2.ResultsDataTable;

                lbTransfer.Items.Add("");
                foreach (DataRow dr2 in dt2.Rows)
                {
                    lbTransfer.Items.Add(dr2["orgunit"].ToString());
                }
            }
            #endregion

            //
            // Do 'Construction-Crew'
            //
            #region
            if (rdbConstCrew.Checked == true)
            {
                //
                //  Load Incomplete List Box
                //
                lbIncomplete.Items.Clear();

                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                if (UseTable == "Old")
                {

                    _dbMan.SqlStatement = _dbMan.SqlStatement + " select distinct(OrgUnit) OrgUnit from BMCS_Gangs ";
                }
                else
                {
                    _dbMan.SqlStatement = _dbMan.SqlStatement + " select distinct(OrgUnit) OrgUnit from BMCS_Gangs_3Month ";
                }
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where ProdMonth = '"+ProdMonthTxt.Value+"' ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and OrgUnit in ( ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " select distinct([OrgUnit]) OrgUnit from dbo.Import_BMCS_Clocking_Total ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where SUBSTRING([OrgUnit], 7,1) = 'Q' ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and SUBSTRING([OrgUnit],1,4) in ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " (select distinct(SUBSTRING(SectionID,1,4)) MO from NorthamPas.dbo.Planning ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where Prodmonth = '" + ProdMonthTxt.Value + "' and Activity <> 1) ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and orgunit not in (select Gang from BMCS_New_Status where prodmonth = '" + ProdMonthTxt.Value + "' ) ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " ) order by OrgUnit ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "ZCrew";
                _dbMan.ExecuteInstruction();

                DataTable dt = _dbMan.ResultsDataTable;

                lbIncomplete.Items.Add("");
                foreach (DataRow dr in dt.Rows)
                {
                    lbIncomplete.Items.Add(dr["OrgUnit"].ToString());
                }

                //
                //Load Printed Listbox
                //
                lbPrinted.Items.Clear();

                MWDataManager.clsDataAccess _dbMan1 = new MWDataManager.clsDataAccess();
                _dbMan1.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " select gang from BonusControl.dbo.BMCS_New_Status where prodmonth = '"+ProdMonthTxt.Value+"' and activity = 'S' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and gang not in (select distinct(orgunit) orgunit from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '0') ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and gang not like '______R%' and gang not like '_______Z' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and gang like '%Q%' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " order by gang ";
                _dbMan1.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan1.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan1.ExecuteInstruction();

                DataTable dt1 = _dbMan1.ResultsDataTable;

                lbPrinted.Items.Add("");
                foreach (DataRow dr1 in dt1.Rows)
                {
                    lbPrinted.Items.Add(dr1["gang"].ToString());
                }

                //
                //Load Transferred Listbox
                //
                lbTransfer.Items.Clear();

                MWDataManager.clsDataAccess _dbMan2 = new MWDataManager.clsDataAccess();
                _dbMan2.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select orgunit, max(transferred) trans from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '"+ProdMonthTxt.Value+"' and activitycode = '0'  ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and orgunit not like '______R%' and orgunit not like '_______Z'  ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and shift ='D' and activitycode = 0 and type = '28' and orgunit like '%Q%' group by orgunit order by orgunit  ";
                _dbMan2.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan2.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan2.ExecuteInstruction();

                DataTable dt2 = _dbMan2.ResultsDataTable;

                lbTransfer.Items.Add("");
                foreach (DataRow dr2 in dt2.Rows)
                {
                    lbTransfer.Items.Add(dr2["orgunit"].ToString());
                }
            }
            #endregion

            //
            // Do 'XC-Crew'
            //
            #region
            if (rdbXCCrew.Checked == true)
            {
                //
                //  Load Incomplete List Box
                //
                lbIncomplete.Items.Clear();

                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                if (UseTable == "Old")
                {
                    _dbMan.SqlStatement = _dbMan.SqlStatement + " select distinct(OrgUnit) OrgUnit from BMCS_Gangs ";
                }
                else
                {
                    _dbMan.SqlStatement = _dbMan.SqlStatement + " select distinct(OrgUnit) OrgUnit from BMCS_Gangs_3Month ";
                }
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where ProdMonth = '"+ProdMonthTxt.Value+"' ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and OrgUnit in ( ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " select distinct([OrgUnit]) OrgUnit from dbo.Import_BMCS_Clocking_Total ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where SUBSTRING([OrgUnit], 7,1) = 'D' ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and SUBSTRING([OrgUnit],1,4) in ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " (select distinct(SUBSTRING(SectionID,1,4)) MO from NorthamPas.dbo.Planning";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where Prodmonth = '"+ProdMonthTxt.Value+"' and Activity <> 1) ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and orgunit not in (select Gang from BMCS_New_Status where prodmonth = '" + ProdMonthTxt.Value + "' ) ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " ) and SUBSTRING(OrgUnit,5,1) <> 'T' order by OrgUnit ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "ZCrew";
                _dbMan.ExecuteInstruction();

                DataTable dt = _dbMan.ResultsDataTable;

                lbIncomplete.Items.Add("");
                foreach (DataRow dr in dt.Rows)
                {
                    lbIncomplete.Items.Add(dr["OrgUnit"].ToString());
                }

                //
                //Load Printed Listbox
                //
                lbPrinted.Items.Clear();

                MWDataManager.clsDataAccess _dbMan1 = new MWDataManager.clsDataAccess();
                _dbMan1.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " select gang from BonusControl.dbo.BMCS_New_Status where prodmonth = '"+ProdMonthTxt.Value+"' and activity = 'S' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and gang not in (select distinct(orgunit) orgunit from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '0') ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and gang not like '______R%' and gang not like '_______Z' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and gang like '______D'+'%' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " order by gang ";
                _dbMan1.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan1.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan1.ExecuteInstruction();

                DataTable dt1 = _dbMan1.ResultsDataTable;

                lbPrinted.Items.Add("");
                foreach (DataRow dr1 in dt1.Rows)
                {
                    lbPrinted.Items.Add(dr1["gang"].ToString());
                }

                //
                //Load Transferred Listbox
                //
                lbTransfer.Items.Clear();

                MWDataManager.clsDataAccess _dbMan2 = new MWDataManager.clsDataAccess();
                _dbMan2.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select orgunit, max(transferred) trans from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '"+ProdMonthTxt.Value+"' and activitycode = '0' ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and orgunit not like '______R%' and orgunit not like '_______Z' ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and shift = 'D' and activitycode = 0 and type = '28' and orgunit like '______D'+'%' and orgunit not like '____T'+'%' group by orgunit order by orgunit ";
                _dbMan2.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan2.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan2.ExecuteInstruction();

                DataTable dt2 = _dbMan2.ResultsDataTable;

                lbTransfer.Items.Add("");
                foreach (DataRow dr2 in dt2.Rows)
                {
                    lbTransfer.Items.Add(dr2["orgunit"].ToString());
                }
            }
            #endregion


            //
            // Do 'Development'
            //
            #region
            if (rdbDev.Checked == true)
            {
                //
                //  Load Incomplete List Box
                //
                lbIncomplete.Items.Clear();

                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = _dbMan.SqlStatement + " select distinct(orgunit) wp from NorthamPas.dbo.survey ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where activitycode = 1 and prodmonth = '"+ProdMonthTxt.Value+"'";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and orgunit not in (select gang from BonusControl.dbo.BMCS_New_Status where prodmonth = '" + ProdMonthTxt.Value + "' and activity = 'D') ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " order by orgunit ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Dev";
                _dbMan.ExecuteInstruction();

                DataTable dt = _dbMan.ResultsDataTable;

                lbIncomplete.Items.Add("");
                foreach (DataRow dr in dt.Rows)
                {
                    lbIncomplete.Items.Add(dr["wp"].ToString());
                }

                //
                //Load Printed Listbox
                //
                lbPrinted.Items.Clear();

                MWDataManager.clsDataAccess _dbMan1 = new MWDataManager.clsDataAccess();
                _dbMan1.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " select gang from BonusControl.dbo.BMCS_New_Status where prodmonth = '"+ProdMonthTxt.Value+"' and activity = 'D' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and gang not in (select distinct(orgunit) orgunit from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '1') ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and SUBSTRING(Gang, 5,1) <> 'T' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " order by gang ";
                _dbMan1.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan1.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan1.ExecuteInstruction();

                DataTable dt1 = _dbMan1.ResultsDataTable;

                lbPrinted.Items.Add("");
                foreach (DataRow dr1 in dt1.Rows)
                {
                    lbPrinted.Items.Add(dr1["gang"].ToString());
                }

                //
                //Load Transferred Listbox
                //
                lbTransfer.Items.Clear();

                MWDataManager.clsDataAccess _dbMan2 = new MWDataManager.clsDataAccess();
                _dbMan2.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select orgunit, max(transferred) trans from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '"+ProdMonthTxt.Value+"'  ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and shift = 'D' and activitycode = 1 and type = '28' group by orgunit order by orgunit ";
                _dbMan2.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan2.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan2.ExecuteInstruction();

                DataTable dt2 = _dbMan2.ResultsDataTable;

                lbTransfer.Items.Add("");
                foreach (DataRow dr2 in dt2.Rows)
                {
                    lbTransfer.Items.Add(dr2["orgunit"].ToString());
                }
            }
            #endregion

            //
            // Do 'Dev Rail Crew'
            //
            #region
            if (rdbDevRailCrew.Checked == true)
            {
                //
                //  Load Incomplete List Box
                //
                lbIncomplete.Items.Clear();

                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = _dbMan.SqlStatement + " select distinct([OrgUnit]) OrgUnit from dbo.Import_BMCS_Clocking_Total  ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where SUBSTRING([OrgUnit], 8,1) = 'A' and SUBSTRING([OrgUnit], 5,1) = 'T' ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and SUBSTRING([OrgUnit],1,4) in ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " (select distinct(SUBSTRING(SectionID,1,4)) MO from NorthamPas.dbo.Planning ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where Prodmonth = '"+ProdMonthTxt.Value+"' and Activity = 1)  ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and orgunit not in (select Gang from BMCS_New_Status where prodmonth = '" + ProdMonthTxt.Value + "' ) ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " order by [OrgUnit] ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Dev";
                _dbMan.ExecuteInstruction();

                DataTable dt = _dbMan.ResultsDataTable;

                lbIncomplete.Items.Add("");
                foreach (DataRow dr in dt.Rows)
                {
                    lbIncomplete.Items.Add(dr["OrgUnit"].ToString());
                }

                //
                //Load Printed Listbox
                //
                lbPrinted.Items.Clear();

                MWDataManager.clsDataAccess _dbMan1 = new MWDataManager.clsDataAccess();
                _dbMan1.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " select gang from BonusControl.dbo.BMCS_New_Status where prodmonth = '"+ProdMonthTxt.Value+"' and activity = 'D' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and gang not in (select distinct(orgunit) orgunit from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '0') ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and substring(gang,8,1) = 'A' and SUBSTRING(Gang, 5,1) = 'T' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " order by gang ";
                _dbMan1.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan1.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan1.ExecuteInstruction();

                DataTable dt1 = _dbMan1.ResultsDataTable;

                lbPrinted.Items.Add("");
                foreach (DataRow dr1 in dt1.Rows)
                {
                    lbPrinted.Items.Add(dr1["gang"].ToString());
                }

                //
                //Load Transferred Listbox
                //
                lbTransfer.Items.Clear();

                MWDataManager.clsDataAccess _dbMan2 = new MWDataManager.clsDataAccess();
                _dbMan2.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select orgunit, max(transferred) trans from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '"+ProdMonthTxt.Value+"' and activitycode = '0'  ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and substring(orgunit,8,1) = 'A' and SUBSTRING(orgunit, 5,1) = 'T'   ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and shift = 'D' and activitycode = 0 and type = '28' ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " group by orgunit order by orgunit ";
                _dbMan2.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan2.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan2.ExecuteInstruction();

                DataTable dt2 = _dbMan2.ResultsDataTable;

                lbTransfer.Items.Add("");
                foreach (DataRow dr2 in dt2.Rows)
                {
                    lbTransfer.Items.Add(dr2["orgunit"].ToString());
                }
            }
            #endregion



            //
            // Do 'Dev Transport Crew'
            //
            #region
            if (rdbDevTransCrew.Checked == true)
            {
                //
                //  Load Incomplete List Box
                //
                lbIncomplete.Items.Clear();

                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = _dbMan.SqlStatement + " select distinct([OrgUnit]) OrgUnit from dbo.Import_BMCS_Clocking_Total  ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where SUBSTRING([OrgUnit], 8,1) = 'B' and SUBSTRING([OrgUnit], 5,1) = 'T' ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and SUBSTRING([OrgUnit],1,4) in  ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " (select distinct(SUBSTRING(SectionID,1,4)) MO from NorthamPas.dbo.Planning ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + "  where Prodmonth = '"+ProdMonthTxt.Value+"' and Activity = 1) ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and orgunit not in (select Gang from BMCS_New_Status where prodmonth = '" + ProdMonthTxt.Value + "' ) ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " order by [OrgUnit] ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Dev";
                _dbMan.ExecuteInstruction();

                DataTable dt = _dbMan.ResultsDataTable;

                lbIncomplete.Items.Add("");
                foreach (DataRow dr in dt.Rows)
                {
                    lbIncomplete.Items.Add(dr["OrgUnit"].ToString());
                }

                //
                //Load Printed Listbox
                //
                lbPrinted.Items.Clear();

                MWDataManager.clsDataAccess _dbMan1 = new MWDataManager.clsDataAccess();
                _dbMan1.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " select gang from BonusControl.dbo.BMCS_New_Status where prodmonth = '"+ProdMonthTxt.Value+"' and activity = 'D' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and gang not in (select distinct(orgunit) orgunit from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '0') ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and substring(gang,8,1) = 'B' and SUBSTRING(Gang, 5,1) = 'T' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + "  order by gang ";
                _dbMan1.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan1.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan1.ExecuteInstruction();

                DataTable dt1 = _dbMan1.ResultsDataTable;

                lbPrinted.Items.Add("");
                foreach (DataRow dr1 in dt1.Rows)
                {
                    lbPrinted.Items.Add(dr1["gang"].ToString());
                }

                //
                //Load Transferred Listbox
                //
                lbTransfer.Items.Clear();

                MWDataManager.clsDataAccess _dbMan2 = new MWDataManager.clsDataAccess();
                _dbMan2.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select orgunit, max(transferred) trans from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '"+ProdMonthTxt.Value+"' and activitycode = '0'  ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + "  and substring(orgunit,8,1) = 'B' and SUBSTRING(orgunit, 5,1) = 'T' ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and shift = 'D' and activitycode = 0 and type = '28' ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " group by orgunit order by orgunit ";
                _dbMan2.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan2.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan2.ExecuteInstruction();

                DataTable dt2 = _dbMan2.ResultsDataTable;

                lbTransfer.Items.Add("");
                foreach (DataRow dr2 in dt2.Rows)
                {
                    lbTransfer.Items.Add(dr2["orgunit"].ToString());
                }
            }
            #endregion

            //
            // Do 'Dev Cleaning Crew'
            //
            #region
            if (rdbDevCleanCrew.Checked == true)
            {
                //
                //  Load Incomplete List Box
                //
                lbIncomplete.Items.Clear();

                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = _dbMan.SqlStatement + " select distinct([OrgUnit]) OrgUnit from dbo.Import_BMCS_Clocking_Total ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where SUBSTRING([OrgUnit], 5,2) in ('T3') and [orgunit] in (select distinct(orgunit) orgunit from BMCS_Gangs where prodmonth = '"+ProdMonthTxt.Value+"') ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and SUBSTRING([OrgUnit],1,4) in ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " (select distinct(SUBSTRING(SectionID,1,4)) MO from NorthamPas.dbo.Planning ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where Prodmonth = '"+ProdMonthTxt.Value+"' and Activity = 1)  ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and orgunit not in (select Gang from BMCS_New_Status where prodmonth = '" + ProdMonthTxt.Value + "' ) ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " order by [OrgUnit] ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Dev";
                _dbMan.ExecuteInstruction();

                DataTable dt = _dbMan.ResultsDataTable;

                lbIncomplete.Items.Add("");
                foreach (DataRow dr in dt.Rows)
                {
                    lbIncomplete.Items.Add(dr["OrgUnit"].ToString());
                }

                //
                //Load Printed Listbox
                //
                lbPrinted.Items.Clear();

                MWDataManager.clsDataAccess _dbMan1 = new MWDataManager.clsDataAccess();
                _dbMan1.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " select gang from BonusControl.dbo.BMCS_New_Status where prodmonth = '"+ProdMonthTxt.Value+"' and activity = 'D' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and gang not in (select distinct(orgunit) orgunit from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '0') ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and SUBSTRING(gang, 5,2) in ('T3') ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " order by gang  ";
                _dbMan1.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan1.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan1.ExecuteInstruction();

                DataTable dt1 = _dbMan1.ResultsDataTable;

                lbPrinted.Items.Add("");
                foreach (DataRow dr1 in dt1.Rows)
                {
                    lbPrinted.Items.Add(dr1["gang"].ToString());
                }

                //
                //Load Transferred Listbox
                //
                lbTransfer.Items.Clear();

                MWDataManager.clsDataAccess _dbMan2 = new MWDataManager.clsDataAccess();
                _dbMan2.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select orgunit, max(transferred) trans from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '"+ProdMonthTxt.Value+"' and activitycode = '0' ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and SUBSTRING([OrgUnit], 5,2) in ('T3')  ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and shift = 'D' and activitycode = 0 and type = '28' ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " group by orgunit order by orgunit ";
                _dbMan2.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan2.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan2.ExecuteInstruction();

                DataTable dt2 = _dbMan2.ResultsDataTable;

                lbTransfer.Items.Add("");
                foreach (DataRow dr2 in dt2.Rows)
                {
                    lbTransfer.Items.Add(dr2["orgunit"].ToString());
                }
            }
            #endregion


            //
            // Do 'Dev Construction Crew'
            //
            #region
            if (rdbDevConCrew.Checked == true)
            {
                //
                //  Load Incomplete List Box
                //
                lbIncomplete.Items.Clear();

                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = _dbMan.SqlStatement + " select distinct([OrgUnit]) OrgUnit from dbo.Import_BMCS_Clocking_Total ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " where SUBSTRING([OrgUnit], 5,2) = 'T6' ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and SUBSTRING([OrgUnit],1,4) in ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " (select distinct(SUBSTRING(SectionID,1,4)) MO from NorthamPas.dbo.Planning ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + "  where Prodmonth = '"+ProdMonthTxt.Value+"' and Activity = 1) ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " and orgunit not in (select Gang from BMCS_New_Status where prodmonth = '" + ProdMonthTxt.Value + "' ) ";
                _dbMan.SqlStatement = _dbMan.SqlStatement + " order by [OrgUnit] ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Dev";
                _dbMan.ExecuteInstruction();

                DataTable dt = _dbMan.ResultsDataTable;

                lbIncomplete.Items.Add("");
                foreach (DataRow dr in dt.Rows)
                {
                    lbIncomplete.Items.Add(dr["OrgUnit"].ToString());
                }

                //
                //Load Printed Listbox
                //
                lbPrinted.Items.Clear();

                MWDataManager.clsDataAccess _dbMan1 = new MWDataManager.clsDataAccess();
                _dbMan1.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " select gang from BonusControl.dbo.BMCS_New_Status where prodmonth = '"+ProdMonthTxt.Value+"' and activity = 'D' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and gang not in (select distinct(orgunit) orgunit from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '" + ProdMonthTxt.Value + "' and activitycode = '0') ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " and SUBSTRING(gang, 5,2) = 'T6' ";
                _dbMan1.SqlStatement = _dbMan1.SqlStatement + " order by gang ";
                _dbMan1.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan1.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan1.ExecuteInstruction();

                DataTable dt1 = _dbMan1.ResultsDataTable;

                lbPrinted.Items.Add("");
                foreach (DataRow dr1 in dt1.Rows)
                {
                    lbPrinted.Items.Add(dr1["gang"].ToString());
                }

                //
                //Load Transferred Listbox
                //
                lbTransfer.Items.Clear();

                MWDataManager.clsDataAccess _dbMan2 = new MWDataManager.clsDataAccess();
                _dbMan2.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select orgunit, max(transferred) trans from BonusControl.dbo.BMCS_ARMS_Interface_TransferNew where prodmonth = '"+ProdMonthTxt.Value+"' and activitycode = '0'  ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and SUBSTRING([OrgUnit], 5,2) = 'T6'  ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and shift = 'D' and activitycode = 0 and type = '28' ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " group by orgunit order by orgunit ";
                _dbMan2.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan2.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan2.ExecuteInstruction();

                DataTable dt2 = _dbMan2.ResultsDataTable;

                lbTransfer.Items.Add("");
                foreach (DataRow dr2 in dt2.Rows)
                {
                    lbTransfer.Items.Add(dr2["orgunit"].ToString());
                }
            }
            #endregion
        }

        private void ProdMonth1Txt_TextChanged(object sender, EventArgs e)
        {
            LoadListBoxes();


            MWDataManager.clsDataAccess _dbManSystemSettings = new MWDataManager.clsDataAccess();
            _dbManSystemSettings.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
            _dbManSystemSettings.SqlStatement = " select * from BMCS_SystemSettings where prodmonth = '"+ProdMonthTxt.Value+"' ";
            _dbManSystemSettings.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManSystemSettings.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManSystemSettings.ResultsTableName = "Stoping";
            _dbManSystemSettings.ExecuteInstruction();

            MerBonusLbl.Text = _dbManSystemSettings.ResultsDataTable.Rows[0]["merenskybonusincreasepercent"].ToString();
            TeamLeaderBonusLbl.Text = _dbManSystemSettings.ResultsDataTable.Rows[0]["specialteamleaderproratastoping"].ToString();
            DrillOpBonusLbl.Text = _dbManSystemSettings.ResultsDataTable.Rows[0]["machinedrilloperatorproratastoping"].ToString();
            AbscentBonusLbl.Text = _dbManSystemSettings.ResultsDataTable.Rows[0]["absentee"].ToString();


        }

        int DSLti = 0;
        int NSLti = 0;
        string Activity = "";
        double RDOLTI = 0;
        double RDOAWOP = 0;
        int DevFact = 0;

       double stpRDORate = 0;
       double stpRDOHolesperMeter = 0;
       int stpRDOAns1 = 0;
       int stpRDOAns2 = 0;
       int RDOShifts = 0;
       double MyTarget = 0;
       double devRDORate = 0;
       double devRDOHolesperMeter = 0;
       string DevCat = "";
       int Comp = 0;
       string ShiftBoss = "";

         int TotalDSShifts = 0;
         int TotalNSShifts = 0;
         int TotalShift = 0;
        
         int TotalDSAwops = 0;
         int TotalNSAwops = 0;
         int TotalAwops = 0;

         decimal WaterEndFactor = 0;
         decimal WaterEndMeters = 0;

        double HoleBonus = 0;

         string Workplaceid = "";
         string description = "";

        private void showBtn_Click(object sender, EventArgs e)
        {

            if (StartDate.Value < DateTime.Now.AddDays(-90))
            {
                UseTable = "Old";
            }
            else
            {
                UseTable = "New";
            }

            TotalDSShifts = 0;
            TotalNSShifts = 0;

           

            Activity = "S";

            DSLti = 0;
            NSLti = 0;
            RDOLTI = 100;
            RDOAWOP = 100;
            DevFact = 0;

            stpRDORate = 1.00;
            stpRDOHolesperMeter = 7.00;
            stpRDOAns1 = 0;
            stpRDOAns2 = 0;
            RDOShifts = 0;
            MyTarget = 0;
            devRDORate = 0;
            devRDOHolesperMeter = 0;
            

            MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
            _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
            _dbMan.SqlStatement = " select distinct(Convert(int, activity)) act from NorthamPas.dbo.planmonth where substring(sectionid,1,4) = '"+lblOrgunit.Text.Substring(0,4)+"'   ";
            _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbMan.ResultsTableName = "Stoping";
            _dbMan.ExecuteInstruction();

            if (_dbMan.ResultsDataTable.Rows[0]["act"].ToString() == "0")
            {

                Activity = "S";
            }
            else
            {
                Activity = "D";
            }

            /////////////////RDO Safety Factor

            MWDataManager.clsDataAccess _dbManRDO = new MWDataManager.clsDataAccess();
            _dbManRDO.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
            _dbManRDO.SqlStatement = _dbManRDO.SqlStatement + " select *, case when b.LTI = 1 then a.Cat_2_8_1st_LTI\r\n ";
            _dbManRDO.SqlStatement = _dbManRDO.SqlStatement + " when b.LTI = 2 then a.Cat_2_8_2nd_LTI\r\n ";
            _dbManRDO.SqlStatement = _dbManRDO.SqlStatement + " when b.LTI >= 3 then a.Cat_2_8_3rd_LTI\r\n ";
            _dbManRDO.SqlStatement = _dbManRDO.SqlStatement + " else a.Cat_2_8_Zero_LTI\r\n  ";
            _dbManRDO.SqlStatement = _dbManRDO.SqlStatement + " end as SafetyFactor\r\n ";
            _dbManRDO.SqlStatement = _dbManRDO.SqlStatement + " from (\r\n ";
            _dbManRDO.SqlStatement = _dbManRDO.SqlStatement + " select * from BMCS_Stoping_LTI\r\n ";
            _dbManRDO.SqlStatement = _dbManRDO.SqlStatement + " where ProdMonth = '" + ProdMonthTxt.Value + "' ) a\r\n ";
            _dbManRDO.SqlStatement = _dbManRDO.SqlStatement + " left outer join\r\n ";
            _dbManRDO.SqlStatement = _dbManRDO.SqlStatement + " (select * from BMCS_SafetyCapture where Prodmonth = '" + ProdMonthTxt.Value + "'\r\n ";
            _dbManRDO.SqlStatement = _dbManRDO.SqlStatement + " and OrgUnit = '" + DsLbl.Text + "' ) b on a. ProdMonth = b.Prodmonth\r\n ";
            _dbManRDO.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManRDO.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManRDO.ExecuteInstruction();

            DataTable dt = _dbManRDO.ResultsDataTable;

            foreach (DataRow dr in dt.Rows)
            {
                RDOLTI = Convert.ToDouble(dr["SafetyFactor"].ToString());
            }

            if (rdbConstCrew.Checked == true)
            {
                Comp = 5;
            }
            if (rdbXCCrew.Checked == true)
            {
                Comp = 5;
            }

            if (rdbDevRailCrew.Checked == true)
            {
                Comp = 6;
            }


            if (rdbDevTransCrew.Checked == true)
            {
                Comp = 4;
            }

            if (rdbDevCleanCrew.Checked == true)
            {
                Comp = 4;
            }

            if (rdbDevConCrew.Checked == true)
            {
                Comp = 7;
            }

            MWDataManager.clsDataAccess _dbMan2 = new MWDataManager.clsDataAccess();
            _dbMan2.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];

            if ((rdbStoping.Checked == true) || (rdbRCrew.Checked == true))
            {
               
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select min(calendardate) mindate, max(calendardate) maxdate \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " from NorthamPas.dbo.planning where sectionid = '" + Sectionlbl.Text + "' \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and prodmonth = '"+ProdMonthTxt.Value+"' \r\n ";

               
            }

            if (rdbZCrew.Checked == true)
            {
                
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select min(calendardate) mindate, max(calendardate) maxdate \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + Sectionlbl.Text.Substring(0,5) + "%' \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' \r\n ";

                
            }

            if (rdbConstCrew.Checked == true)
            {
                ShiftBoss = DsLbl.Text.Substring(0, 4) + DsLbl.Text.Substring(7, 1);

               
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select min(calendardate) mindate, max(calendardate) maxdate \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + ShiftBoss + "%' \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' \r\n ";

               
            }

            if (rdbXCCrew.Checked == true)
            {
                
               
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select min(calendardate) mindate, max(calendardate) maxdate \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + Sectionlbl.Text.Substring(0, 4) + "%' \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' \r\n ";

               
            }

            if (rdbDev.Checked == true)
            {

                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select min(calendardate) mindate, max(calendardate) maxdate \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " from NorthamPas.dbo.planning where sectionid = '" + Sectionlbl.Text + "' \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' \r\n ";


            }

            if (rdbDevRailCrew.Checked == true)
            {

                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select min(calendardate) mindate, max(calendardate) maxdate \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + Sectionlbl.Text.Substring(0,4) + "%' \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' \r\n ";


            }

            if (rdbDevTransCrew.Checked == true)
            {

                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select min(calendardate) mindate, max(calendardate) maxdate \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + Sectionlbl.Text.Substring(0, 4) + "%' \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' \r\n ";


            }

            if (rdbDevCleanCrew.Checked == true)
            {

                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select min(calendardate) mindate, max(calendardate) maxdate \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + Sectionlbl.Text.Substring(0, 4) + "%' \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' \r\n ";


            }

            if (rdbDevConCrew.Checked == true)
            {
                ShiftBoss = DsLbl.Text.Substring(0, 4) + DsLbl.Text.Substring(6, 1);


                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " select min(calendardate) mindate, max(calendardate) maxdate \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + ShiftBoss + "%' \r\n ";
                _dbMan2.SqlStatement = _dbMan2.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' \r\n ";


            }


            _dbMan2.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbMan2.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbMan2.ExecuteInstruction();

            if (_dbMan2.ResultsDataTable.Rows[0]["mindate"] == DBNull.Value)
            {
                MessageBox.Show("No Planning found for Section : " + Sectionlbl.Text);
                return;
            }

            if (_dbMan2.ResultsDataTable.Rows[0]["mindate"].ToString() == "")
            {
                MessageBox.Show("No Planning found for Section : " + Sectionlbl.Text);
                return;
            }

            StartDate.Value = Convert.ToDateTime(_dbMan2.ResultsDataTable.Rows[0]["mindate"].ToString());
            EndDate.Value = Convert.ToDateTime(_dbMan2.ResultsDataTable.Rows[0]["maxdate"].ToString());




            CrewGrid1.Visible = true;
            CrewGrid1.Rows.Clear();
            CrewGrid1.RowCount = 500;
            CrewGrid1.ColumnCount = 63;


            CrewGrid1.Columns[0].HeaderText = "Designation";
            CrewGrid1.Columns[1].HeaderText = "Industry Number";

            TimeSpan Days;

            Days = EndDate.Value - StartDate.Value;
            int x = 0;

            for (int i = 2; i <= 47; i++)
            {
                if (x <= Days.Days)
                {
                    CrewGrid1.Columns[i].HeaderText = StartDate.Value.AddDays(x).ToString("dd MMM ddd");
                    CrewGrid1.Columns[i].Width = 40;
                    x = x + 1;
                }
                else
                {
                    CrewGrid1.Columns[i].Visible = false;
                }
            }

            //CrewGrid1.ColumnCount = x + 10;
           

            CrewGrid1.Columns[48].HeaderText = "Total Shifts";
            CrewGrid1.Columns[48].Width = 60;
            CrewGrid1.Columns[49].HeaderText = "Absent Shift";
            CrewGrid1.Columns[49].Width = 60;
            CrewGrid1.Columns[50].HeaderText = "Pro Rata Incentive";
            CrewGrid1.Columns[50].Width = 60;
            CrewGrid1.Columns[51].HeaderText = "Safety Deduction";
            CrewGrid1.Columns[51].Width = 60;
            CrewGrid1.Columns[52].HeaderText = "Attendance Deduction";
            CrewGrid1.Columns[52].Width = 60;
            CrewGrid1.Columns[53].HeaderText = "Fatal Deduction";
            CrewGrid1.Columns[53].Width = 60;
            CrewGrid1.Columns[54].HeaderText = "Adjustment";
            CrewGrid1.Columns[54].Width = 60;
            CrewGrid1.Columns[55].HeaderText = "RDO Hole Incentive";
            CrewGrid1.Columns[55].Width = 60;
            CrewGrid1.Columns[56].HeaderText = "RDO Inscentive";
            CrewGrid1.Columns[56].Width = 60;
            CrewGrid1.Columns[57].HeaderText = "Final Payment";
            CrewGrid1.Columns[57].Width = 60;
            CrewGrid1.Columns[58].HeaderText = "Category";
            CrewGrid1.Columns[58].Width = 60;
            CrewGrid1.Columns[59].HeaderText = "Vis";
            CrewGrid1.Columns[59].Width = 60;
            CrewGrid1.Columns[60].HeaderText = "Shift";
            CrewGrid1.Columns[60].Width = 60;
            CrewGrid1.Columns[61].HeaderText = "Surname";
            CrewGrid1.Columns[61].Width = 60;
            CrewGrid1.Columns[62].HeaderText = "Initials";
            CrewGrid1.Columns[62].Width = 60;

            MWDataManager.clsDataAccess _dbManPosShifts = new MWDataManager.clsDataAccess();
            _dbManPosShifts.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];


            if ((rdbStoping.Checked == true) || (rdbRCrew.Checked == true))
            {

                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " select  distinct(calendardate) mindate \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " from NorthamPas.dbo.planning where sectionid = '" + Sectionlbl.Text + "' \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' and WorkingDay = 'Y' \r\n ";


            }

            if (rdbZCrew.Checked == true)
            {

                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " select  distinct(calendardate) mindate \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + Sectionlbl.Text.Substring(0,5) + "%' \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' and WorkingDay = 'Y' \r\n ";


            }

            if (rdbConstCrew.Checked == true)
            {
                ShiftBoss = Sectionlbl.Text.Substring(0, 4); //+ Sectionlbl.Text.Substring(7, 1);


                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " select  distinct(calendardate) mindate \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + ShiftBoss + "%' \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' and WorkingDay = 'Y' \r\n ";


            }

            if (rdbXCCrew.Checked == true)
            {


                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " select  distinct(calendardate) mindate \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + Sectionlbl.Text.Substring(0, 4) + "%' \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' and WorkingDay = 'Y' \r\n ";


            }

            if (rdbDev.Checked == true)
            {

                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " select  distinct(calendardate) mindate \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " from NorthamPas.dbo.planning where sectionid = '" + Sectionlbl.Text + "' \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' and WorkingDay = 'Y' \r\n ";


            }

            if (rdbDevRailCrew.Checked == true)
            {

                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " select  distinct(calendardate) mindate \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + Sectionlbl.Text.Substring(0, 4) + "%' \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' and WorkingDay = 'Y' \r\n ";


            }

            if (rdbDevTransCrew.Checked == true)
            {

                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " select  distinct(calendardate) mindate \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + Sectionlbl.Text.Substring(0, 4) + "%' \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' and WorkingDay = 'Y' \r\n ";


            }

            if (rdbDevCleanCrew.Checked == true)
            {

                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " select  distinct(calendardate) mindate \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + Sectionlbl.Text.Substring(0, 4) + "%' \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' and WorkingDay = 'Y' \r\n ";


            }

            if (rdbDevConCrew.Checked == true)
            {
                ShiftBoss = DsLbl.Text.Substring(0, 4) + DsLbl.Text.Substring(6, 1);

                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " select  distinct(calendardate) mindate \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " from NorthamPas.dbo.planning where sectionid like '" + Sectionlbl.Text.Substring(0, 4) + "%' \r\n ";
                _dbManPosShifts.SqlStatement = _dbManPosShifts.SqlStatement + " and prodmonth = '" + ProdMonthTxt.Value + "' and WorkingDay = 'Y' \r\n ";


            }

            _dbManPosShifts.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManPosShifts.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManPosShifts.ExecuteInstruction();
            int posShifts = 0;

            foreach (DataRow dr in _dbManPosShifts.ResultsDataTable.Rows)
            {
                posShifts = posShifts + 1;
            }

            PosShiftsLbl.Text = posShifts.ToString();

            WPGrid.Visible = true;
            WPGrid.Rows.Clear();
            WPGrid.RowCount = 10;
            WPGrid.ColumnCount = 4;


            WPGrid.Columns[0].HeaderText = "Workplace";
            WPGrid.Columns[1].HeaderText = "Sqm";
            WPGrid.Columns[2].HeaderText = "Waste";
            WPGrid.Columns[3].HeaderText = "Sweeps";

            WPGrid.Columns[0].Width = 60;
            WPGrid.Columns[1].Width = 40;
            WPGrid.Columns[2].Width = 40;
            WPGrid.Columns[3].Width = 40;

            WPGrid.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            WPGrid.Columns[2].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            WPGrid.Columns[3].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;


            MWDataManager.clsDataAccess _dbManWP = new MWDataManager.clsDataAccess();
            _dbManWP.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];

            if (rdbStoping.Checked == true)
            {


              
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " select workplaceid, description, sum(squaremetrestotal) squaremetrestotal, sum(facelength) fl, sum(wastesqm) wastesqm, \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + "sum(sweeps) sweeps, Max(reef) reef, sum(metrestotal) metrestotal, sum(reefcubics+wastecubics) cubics, max(endtypeid) endtypeid from \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " (select case when goldgrade < 0.01 then squaremetrestotal else 0 end as wastesqm, \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " s.workplaceid, s.facelength, w.description,  squaremetrestotal, sweeps, metrestotal, endtypeid,reefcubics,wastecubics, \r\n  ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " case when w.reefid <> 2 then 'Mer' else 'Ug2' end as reef from NorthamPas.dbo.survey s, NorthamPas.dbo.workplace w  where prodmonth = '" + ProdMonthTxt.Value + "' \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " and orgunit = '" + DsLbl.Text + "' \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " and s.workplaceid = w.workplaceid) a group by workplaceid, description order by metrestotal \r\n ";

               
            }

            if (rdbZCrew.Checked == true )
            {
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " Select * from BMCS_ZGangAveragenew_Adjustments \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " where ProdMonth = '"+ProdMonthTxt.Value+"' \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " and OrgUnitDS like '" + DsLbl.Text.Substring(0, 7) + "%' \r\n ";
         
            }


            if (rdbConstCrew.Checked == true)
            {
                ShiftBoss = DsLbl.Text.Substring(0, 5);

                _dbManWP.SqlStatement = _dbManWP.SqlStatement + "  Select ProdMonth, substring(OrgUnitDS,1,6) OrgUnitDS,'' Workplace, Sum(BIP) BIP, PossibleShifts, ID, COUNT(Workplace) Counter1  \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " from dbo.BMCS_ZGangAverageNew  \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + "  where ProdMonth = '"+ProdMonthTxt.Value+"' \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " and OrgUnitDS like '"+ShiftBoss+"%' \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " group by SUBSTRING(OrgUnitDS,1,6), prodmonth, PossibleShifts, ID \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + "  \r\n ";

            }

            if (rdbXCCrew.Checked == true)
            {
                ShiftBoss = DsLbl.Text.Substring(0, 4);

                _dbManWP.SqlStatement = _dbManWP.SqlStatement + "  Select ProdMonth, substring(OrgUnitDS,1,5) OrgUnitDS,'' Workplace, Sum(BIP) BIP, PossibleShifts, ID, COUNT(Workplace) Counter1  \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " from dbo.BMCS_ZGangAverageNew  \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + "  where ProdMonth = '" + ProdMonthTxt.Value + "' \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " and OrgUnitDS like '" + ShiftBoss + "%' \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " group by SUBSTRING(OrgUnitDS,1,5), prodmonth, PossibleShifts, ID \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + "  \r\n ";

            }


            if (rdbDev.Checked == true)
            {



                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " select workplaceid, description, sum(squaremetrestotal) squaremetrestotal, sum(facelength) fl, sum(wastesqm) wastesqm, \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + "sum(sweeps) sweeps, Max(reef) reef, sum(metrestotal) metrestotal, sum(reefcubics+wastecubics) cubics, max(endtypeid) endtypeid from \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " (select case when goldgrade < 0.01 then squaremetrestotal else 0 end as wastesqm, \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " s.workplaceid, s.facelength, w.description,  squaremetrestotal, sweeps, metrestotal, endtypeid,reefcubics,wastecubics, \r\n  ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " case when w.reefid <> 2 then 'Mer' else 'Ug2' end as reef from NorthamPas.dbo.survey s, NorthamPas.dbo.workplace w  where prodmonth = '" + ProdMonthTxt.Value + "' \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " and orgunit = '" + DsLbl.Text + "' \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " and s.workplaceid = w.workplaceid) a group by workplaceid, description order by metrestotal \r\n ";


            }


            if (rdbDevRailCrew.Checked == true)
            {

                ShiftBoss = DsLbl.Text.Substring(0, 4);

                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " Select ProdMonth, substring(OrgUnit,1,5) OrgUnit,'' Workplace, Sum(BIP) BIP, PossibleShifts, ID, COUNT(Workplace) Counter1 from ( \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " select * from ( \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " select * from dbo.BMCS_DevRepNew \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " where ProdMonth = '"+ProdMonthTxt.Value+"' \r\n  ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " and OrgUnit like '"+ShiftBoss+"%' and SUBSTRING(Workplace,1,2) = '"+DsLbl.Text.Substring(5,2)+"' ) a  \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " left outer join \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " (select Description, EndTypeID from NorthamPAS.dbo.WORKPLACE \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " where EndTypeID in ('1','2') ) b on a.Workplace = b.Description \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " where EndTypeID is not null ) c  \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " group by SUBSTRING(OrgUnit,1,5), prodmonth, PossibleShifts, ID \r\n ";


            }

            if (rdbDevTransCrew.Checked == true)
            {

                ShiftBoss = DsLbl.Text.Substring(0, 4);

                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " Select ProdMonth, substring(OrgUnit,1,5) OrgUnit,'' Workplace, Sum(BIP) BIP, PossibleShifts, ID, COUNT(Workplace) Counter1 from ( \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " select * from ( \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " select * from dbo.BMCS_DevRepNew \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " where ProdMonth = '"+ProdMonthTxt.Value+"' \r\n  ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + "  and OrgUnit like '" + ShiftBoss + "%' and SUBSTRING(Workplace,1,2) = '" + DsLbl.Text.Substring(5, 2) + "' ) a \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " left outer join \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " (select Description, EndTypeID from NorthamPAS.dbo.WORKPLACE \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " where EndTypeID in ('1','2', '3') ) b on a.Workplace = b.Description \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " where EndTypeID is not null ) c  \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " group by SUBSTRING(OrgUnit,1,5), prodmonth, PossibleShifts, ID \r\n ";


            }

            if (rdbDevCleanCrew.Checked == true)
            {

                ShiftBoss = DsLbl.Text.Substring(0, 4) + DsLbl.Text.Substring(6, 1);

                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " Select ProdMonth, substring(OrgUnit,1,5) OrgUnit,'' Workplace, Sum(BIP) BIP, PossibleShifts, ID, COUNT(Workplace) Counter1 from ( \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " select * from ( \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " select * from dbo.BMCS_DevRepNew \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " where ProdMonth = '"+ProdMonthTxt.Value+"' \r\n  ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " and OrgUnit like '"+ShiftBoss+"%' and SUBSTRING(OrgUnit,7,1) in ('R', 'B') )a \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " left outer join \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " (select Description, EndTypeID from NorthamPAS.dbo.WORKPLACE \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " where EndTypeID in ('3','4', '5', '12')) b on a.Workplace = b.Description \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + "  where EndTypeID is not null )c \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " group by SUBSTRING(OrgUnit,1,5), prodmonth, PossibleShifts, ID \r\n ";


            }


            if (rdbDevConCrew.Checked == true)
            {

                ShiftBoss = DsLbl.Text.Substring(0, 4) + DsLbl.Text.Substring(6, 1);

                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " Select * from BMCS_DevRepNew \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + " where ProdMonth = '"+ProdMonthTxt.Value+"'  \r\n ";
                _dbManWP.SqlStatement = _dbManWP.SqlStatement + "and OrgUnit like '"+ShiftBoss+"%' \r\n ";
                


            }

            _dbManWP.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManWP.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManWP.ExecuteInstruction();

            int q = 0;
            double sqm = 0;
            int waste = 0;
            int sweeps = 0;
           
            int row = 0;
            ReefTypelbl.Text = "Ug2";

            if (rdbDev.Checked == true)
            {
                if (DsLbl.Text.Substring(6, 1) == "F")
                {
                    DevTypeLbl.Text = "FWD";
                }

                if (DsLbl.Text.Substring(6, 1) == "R")
                {
                    DevTypeLbl.Text = "Raise";
                }

                if (DsLbl.Text.Substring(6, 1) == "B")
                {
                    DevTypeLbl.Text = "BH";
                }
            }

            if (rdbStoping.Checked)
            {


                if (_dbManWP.ResultsDataTable.Rows[0]["Reef"].ToString() == "Mer")
                {
                    ReefTypelbl.Text = "Mer";
                }
            }

            if (rdbDev.Checked)
            {


                if (_dbManWP.ResultsDataTable.Rows[0]["Reef"].ToString() == "Mer")
                {
                    ReefTypelbl.Text = "Mer";
                }
            }

            foreach (DataRow dr in _dbManWP.ResultsDataTable.Rows)
            {
                if (rdbStoping.Checked == true)
                {

                    WPGrid.Rows[row].Cells[0].Value = dr["Workplaceid"].ToString() + " : " + dr["description"].ToString();
                    Workplaceid = dr["Workplaceid"].ToString();
                    description = dr["description"].ToString();


                     WPGrid.Rows[row].Cells[1].Value = dr["squaremetrestotal"].ToString();
                    sqm = sqm + Convert.ToDouble(dr["squaremetrestotal"].ToString());

                    WPGrid.Rows[row].Cells[2].Value = dr["Wastesqm"].ToString();
                    waste = waste + Convert.ToInt32(dr["Wastesqm"].ToString());

                    WPGrid.Rows[row].Cells[3].Value = dr["Sweeps"].ToString();
                    sweeps = sweeps + Convert.ToInt32(dr["Sweeps"].ToString());
                }

                if (rdbZCrew.Checked == true)
                {
                    q = q + 1;
                    WPGrid.Rows[row].Cells[0].Value = dr["OrgUnitDS"].ToString();
                    WPGrid.Rows[row].Cells[1].Value =String.Format("{0:0.00}", dr["BIP"].ToString());


                    sqm = sqm + Convert.ToDouble(dr["BIP"].ToString());
                }

                if (rdbConstCrew.Checked == true)
                {
                    
                    WPGrid.Rows[row].Cells[0].Value = dr["OrgUnitDS"].ToString();
                    WPGrid.Rows[row].Cells[1].Value = String.Format("{0:0.00}", dr["BIP"].ToString());
                    WPGrid.Rows[row].Cells[2].Value = dr["Counter1"].ToString();
                    q = q + Convert.ToInt16(dr["Counter1"].ToString());
                    sqm = sqm + Convert.ToDouble(dr["BIP"].ToString());
                }


                if (rdbXCCrew.Checked == true)
                {

                    WPGrid.Rows[row].Cells[0].Value = dr["OrgUnitDS"].ToString();
                    WPGrid.Rows[row].Cells[1].Value = String.Format("{0:0.00}", dr["BIP"].ToString());
                    WPGrid.Rows[row].Cells[2].Value = dr["Counter1"].ToString();
                    q = q + Convert.ToInt16(dr["Counter1"].ToString());
                    sqm = sqm + Convert.ToDouble(dr["BIP"].ToString());
                }

               
             
                if (rdbRCrew.Checked == true)
                {
                    WPGrid.Rows[row].Cells[1].Value = Math.Round(Convert.ToDouble(dr["squaremetrestotal"].ToString()) / (Convert.ToDouble(dr["FL"].ToString())+0.0001), 2);
                    sqm = sqm + Convert.ToDouble(dr["squaremetrestotal"].ToString()) / (Convert.ToDouble(dr["FL"].ToString()) + 0.0001); ;
                }


                if (rdbDev.Checked == true)
                {

                    WPGrid.Rows[row].Cells[0].Value = dr["Workplaceid"].ToString() + " : " + dr["description"].ToString();
                    Workplaceid = dr["Workplaceid"].ToString();
                    description = dr["description"].ToString();


                    WPGrid.Rows[row].Cells[1].Value = Convert.ToDouble(dr["metrestotal"].ToString()) + (Convert.ToDouble(dr["cubics"].ToString())/10);
                    sqm = sqm + Convert.ToDouble(dr["metrestotal"].ToString()) + (Convert.ToDouble(dr["cubics"].ToString()) / 10);

                   
                }

                if (rdbDevRailCrew.Checked == true)
                {

                    WPGrid.Rows[row].Cells[0].Value = dr["OrgUnit"].ToString().Substring(0,4);
                    //Workplaceid = dr["OrgUnit"].ToString();


                    WPGrid.Rows[row].Cells[1].Value = Convert.ToDouble(dr["BIP"].ToString());
                    WPGrid.Rows[row].Cells[1].Value =dr["Counter1"].ToString();
                    sqm = sqm + Convert.ToDouble(dr["BIP"].ToString()) / (Convert.ToDouble(dr["Counter1"].ToString()));


                }

                if (rdbDevTransCrew.Checked == true)
                {

                    WPGrid.Rows[row].Cells[0].Value = dr["OrgUnit"].ToString().Substring(0, 4);
                    //Workplaceid = dr["OrgUnit"].ToString();


                    WPGrid.Rows[row].Cells[1].Value = String.Format("{0:0.00}", Convert.ToDouble(dr["BIP"].ToString()));
                    WPGrid.Rows[row].Cells[2].Value = dr["Counter1"].ToString();
                    q = q + Convert.ToInt16(dr["Counter1"].ToString());
                    sqm = sqm + Convert.ToDouble(dr["BIP"].ToString());


                }

                if (rdbDevCleanCrew.Checked == true)
                {

                    WPGrid.Rows[row].Cells[0].Value = dr["OrgUnit"].ToString().Substring(0, 4);
                    //Workplaceid = dr["OrgUnit"].ToString();


                    WPGrid.Rows[row].Cells[1].Value = String.Format("{0:0.00}", Convert.ToDouble(dr["BIP"].ToString()));
                    WPGrid.Rows[row].Cells[2].Value = dr["Counter1"].ToString();
                    q = q + Convert.ToInt16(dr["Counter1"].ToString());
                    sqm = sqm + Convert.ToDouble(dr["BIP"].ToString());


                }

                if (rdbDevConCrew.Checked == true)
                {

                    WPGrid.Rows[row].Cells[0].Value = dr["OrgUnit"].ToString();
                    //Workplaceid = dr["OrgUnit"].ToString();


                    WPGrid.Rows[row].Cells[1].Value = String.Format("{0:0.00}", Convert.ToDouble(dr["BIP"].ToString()));
                    
                    q = q + 1;
                    sqm = sqm + Convert.ToDouble(dr["BIP"].ToString());


                }

                

                row = row + 1;
            }

            //row = row + 1;

            WPGrid.Rows[row].Cells[0].Value = "Total";
            if (rdbStoping.Checked == true)
            {
                WPGrid.Rows[row].Cells[1].Value = sqm.ToString();
                TotalWPSqmLbl.Text = sqm.ToString();

                WPGrid.Rows[row].Cells[2].Value = waste.ToString();
                WPGrid.Rows[row].Cells[3].Value = sweeps.ToString();
                TotalSweepsLbl.Text = sweeps.ToString();
            }
           if(rdbZCrew.Checked == true)
            {
                WPGrid.Rows[row].Cells[1].Value = Math.Round(sqm / (q+0.00001),2).ToString("0.00");
                TotalWPSqmLbl.Text = WPGrid.Rows[row].Cells[1].Value.ToString();

                WPGrid.Rows[row].Cells[2].Value = waste.ToString();
                WPGrid.Rows[row].Cells[3].Value = sweeps.ToString();
                TotalSweepsLbl.Text = sweeps.ToString();

            }

           if (rdbConstCrew.Checked == true)
           {
               WPGrid.Rows[row].Cells[1].Value = Math.Round(sqm / (q + 0.00001), 2).ToString("0.00");
               WPGrid.Rows[row].Cells[2].Value = q.ToString();
               TotalWPSqmLbl.Text = WPGrid.Rows[row].Cells[1].Value.ToString();

               //WPGrid.Rows[row].Cells[2].Value = q.ToString();
               //WPGrid.Rows[row].Cells[3].Value = sweeps.ToString();
               //TotalSweepsLbl.Text = sweeps.ToString();
           }

           if (rdbXCCrew.Checked == true)
           {
               WPGrid.Rows[row].Cells[1].Value = Math.Round(sqm / (q + 0.00001), 2).ToString("0.00");
               WPGrid.Rows[row].Cells[2].Value = q.ToString();


               TotalWPSqmLbl.Text = WPGrid.Rows[row].Cells[1].Value.ToString();
           }

           if (rdbDev.Checked == true)
           {
               WPGrid.Rows[row].Cells[1].Value = sqm.ToString("0.00");
               TotalWPSqmLbl.Text = sqm.ToString();

              
               TotalSweepsLbl.Text = sweeps.ToString();
           }

           if (rdbDevRailCrew.Checked == true)
           {
               WPGrid.Rows[row].Cells[1].Value = sqm.ToString("0.00");
               TotalWPSqmLbl.Text = sqm.ToString();


               TotalSweepsLbl.Text = sweeps.ToString();
           }

           if (rdbDevTransCrew.Checked == true)
           {
               if (q > 0)
               {
                   WPGrid.Rows[row].Cells[1].Value = Math.Round(sqm / (q + 0.00001), 2).ToString("0.00");
                   WPGrid.Rows[row].Cells[2].Value = q.ToString();


                   TotalWPSqmLbl.Text = WPGrid.Rows[row].Cells[1].Value.ToString();
               }
           }

           if (rdbDevCleanCrew.Checked == true)
           {
               if (q > 0)
               {
                   WPGrid.Rows[row].Cells[1].Value = Math.Round(sqm / (q + 0.00001), 2).ToString("0.00");
                   WPGrid.Rows[row].Cells[2].Value = q.ToString();


                   TotalWPSqmLbl.Text = WPGrid.Rows[row].Cells[1].Value.ToString();
               }
           }

           if (rdbDevConCrew.Checked == true)
           {
               if (q > 0)
               {
                   WPGrid.Rows[row].Cells[1].Value = Math.Round(sqm / (q + 0.00001), 2).ToString("0.00");
                   //WPGrid.Rows[row].Cells[2].Value = q.ToString();


                   TotalWPSqmLbl.Text = WPGrid.Rows[row].Cells[1].Value.ToString();
               }
           }
           

            WPGrid.RowCount = row+1;

            
          

            MWDataManager.clsDataAccess _dbManWaterEnd = new MWDataManager.clsDataAccess();
            _dbManWaterEnd.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
            _dbManWaterEnd.SqlStatement = _dbManWaterEnd.SqlStatement + "select * from dbo.BMCS_OrgunitFactor\r\n ";
            _dbManWaterEnd.SqlStatement = _dbManWaterEnd.SqlStatement + " where prodmonth = '"+ProdMonthTxt.Value+"' \r\n ";
            _dbManWaterEnd.SqlStatement = _dbManWaterEnd.SqlStatement + " and orgunit = '"+DsLbl.Text+"' \r\n ";

            _dbManWaterEnd.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManWaterEnd.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManWaterEnd.ExecuteInstruction();

            WaterEndFactor = 1;
            WaterEndMeters = 1;

            foreach (DataRow dr in _dbManWaterEnd.ResultsDataTable.Rows)
            {
                WaterEndFactor = Convert.ToDecimal(dr["Factor"].ToString());
                WaterEndMeters = Convert.ToDecimal(dr["Metres"].ToString());
            }

            string WaterEndApplied = "";

            MWDataManager.clsDataAccess _dbManWaterA = new MWDataManager.clsDataAccess();
            _dbManWaterA.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
            _dbManWaterA.SqlStatement = _dbManWaterA.SqlStatement + " select * from dbo.BMCS_OrgunitWaterEnd \r\n ";
            _dbManWaterA.SqlStatement = _dbManWaterA.SqlStatement + " where prodmonth = '" + ProdMonthTxt.Value + "' \r\n ";
            _dbManWaterA.SqlStatement = _dbManWaterA.SqlStatement + " and orgunit = '" + DsLbl.Text + "' \r\n ";

            _dbManWaterA.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManWaterA.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManWaterA.ExecuteInstruction();

            if (_dbManWaterA.ResultsDataTable.Rows.Count > 0)
            {
                WaterEndApplied = "Y";
            }
            else
            {
                WaterEndApplied = "N";
            }


            double RaiseBoreFactor = 0;

            if (DevTypeLbl.Text == "Raise")
            {
                RaiseBoreFactor = 1;
                MWDataManager.clsDataAccess _dbManRaise = new MWDataManager.clsDataAccess();
                _dbManRaise.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbManRaise.SqlStatement = _dbManRaise.SqlStatement + " select *, substring(Description,4,2) MyLine from NorthamPas.dbo.WORKPLACE \r\n ";
                _dbManRaise.SqlStatement = _dbManRaise.SqlStatement + " where WorkplaceID = '"+Workplaceid+"' \r\n ";
                _dbManRaise.SqlStatement = _dbManRaise.SqlStatement + "  \r\n ";

                _dbManRaise.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbManRaise.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbManRaise.ExecuteInstruction();


                if (_dbManRaise.ResultsDataTable.Rows.Count > 0)
                {
                    if ((_dbManRaise.ResultsDataTable.Rows[0]["OreFlowID"].ToString() == "62") || (_dbManRaise.ResultsDataTable.Rows[0]["OreFlowID"].ToString() == "63"))
                    {
                        if (_dbManRaise.ResultsDataTable.Rows[0]["MyLine"].ToString() == "17")
                        {
                            if (sqm > 45)
                            {
                                RaiseBoreFactor = 1.5;
                            }
                        }
                    }
                }
                else
                {
                    RaiseBoreFactor = 1;
                }
            }


            string indNum = "";


            MWDataManager.clsDataAccess _dbManID = new MWDataManager.clsDataAccess();
            _dbManID.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];

            if (UseTable == "Old")
            {
                _dbManID.SqlStatement = _dbManID.SqlStatement + " Select distinct IndustryNumber from bonuscontrol.dbo.BMCS_Gangs \r\n ";
            }
            else
            {
                _dbManID.SqlStatement = _dbManID.SqlStatement + " Select distinct IndustryNumber from bonuscontrol.dbo.BMCS_Gangs_3Month \r\n ";
            }
            _dbManID.SqlStatement = _dbManID.SqlStatement + " where prodmonth = '" + ProdMonthTxt.Value + "'   \r\n ";
            _dbManID.SqlStatement = _dbManID.SqlStatement + " and orgunit in ( '" + DsLbl.Text + "', '" + NSLbl.Text + "') \r\n ";

            _dbManID.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManID.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManID.ExecuteInstruction();

            indNum = "";

            foreach (DataRow dr in _dbManID.ResultsDataTable.Rows)
            {
               // indNum = indNum + ","+ dr["IndustryNumber"].ToString();
                indNum = indNum + @"'" + dr["IndustryNumber"].ToString() + @"',";
            }
            indNum = indNum + @"''";

            if (_dbManID.ResultsDataTable.Rows.Count > 0)
            {
                MWDataManager.clsDataAccess _dbManData = new MWDataManager.clsDataAccess();
                _dbManData.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];

                if ((rdbStoping.Checked == true) || (rdbZCrew.Checked == true))
                {

                    _dbManData.SqlStatement = _dbManData.SqlStatement + " select aa, a.industrynumber, a.date, codes, leaveflag, ne, awops, Category, awop5,Shift,n.Surname,n.Initials from (Select \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + "  case when Category = 'Special Team Leader Stoping'  then 1 \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " when Category = 'Stope Machine Operator' then 2 \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " when Category = 'Stope Machine Asst' then 3 \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " else 4 end as aa, \r\n ";
                }

                if ((rdbRCrew.Checked == true) || (rdbDev.Checked == true) )
                {

                    _dbManData.SqlStatement = _dbManData.SqlStatement + " select aa, a.industrynumber, a.date, codes, leaveflag, ne, awops, Category, awop5,Shift,n.Surname,n.Initials from (Select \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " case when Category = 'Special Team Leader Development' then 1  \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " when Category = 'Development Machine Operator' then 2 \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " when Category = 'Development Machine Asst' then 3  \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " else 4 end as aa, \r\n ";
                }

                if ((rdbConstCrew.Checked == true) || (rdbXCCrew.Checked == true))
                {

                    _dbManData.SqlStatement = _dbManData.SqlStatement + " select aa, a.industrynumber, a.date, codes, leaveflag, ne, awops, Category, awop5,Shift,n.Surname,n.Initials from (Select \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + "  case when Category = 'Team Leader' then 1 \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " when Category = 'Loco Driver' then 2 \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " when Category = 'Jetting Gun Operator' then 3  \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " else 4 end as aa,  \r\n ";
                }

                if ((rdbDevRailCrew.Checked == true) || (rdbDevTransCrew.Checked == true) || (rdbDevConCrew.Checked == true))
                {

                    _dbManData.SqlStatement = _dbManData.SqlStatement + " select aa, a.industrynumber, a.date, codes, leaveflag, ne, awops, Category, awop5,Shift,n.Surname,n.Initials from (Select \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " case when Category = 'Team Leader' then 1 \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " else 4 end as aa, \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + "  \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + "  \r\n ";
                }

                if (rdbDevCleanCrew.Checked == true)
                {
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " select aa, a.industrynumber, a.date, codes, leaveflag, ne, awops, Category, awop5,Shift,n.Surname,n.Initials from (Select \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " case when Category = 'Team Leader' then 1 \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " when Category = 'Loco Driver' then 2 \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " when Category = 'Jetting Gun Operator' then 3 \r\n ";
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " else 4 end as aa, \r\n ";
                }
                if (UseTable == "Old")
                {

                    _dbManData.SqlStatement = _dbManData.SqlStatement + " * from bonuscontrol.dbo.BMCS_Gangs \r\n ";
                }
                else
                {
                    _dbManData.SqlStatement = _dbManData.SqlStatement + " * from bonuscontrol.dbo.BMCS_Gangs_3Month \r\n ";
                }
                _dbManData.SqlStatement = _dbManData.SqlStatement + " where prodmonth = '"+ProdMonthTxt.Value+"'  \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " and orgunit in( '" + DsLbl.Text + "', '"+NSLbl.Text+"')  ) a \r\n ";

                _dbManData.SqlStatement = _dbManData.SqlStatement + " left outer join Import_BMCS_Personnel_Names n  \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " on a.IndustryNumber = n.industrynumber \r\n ";

                _dbManData.SqlStatement = _dbManData.SqlStatement + " left outer join(  \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " \r\n ";

                _dbManData.SqlStatement = _dbManData.SqlStatement + " select distinct B.[Resource Reference], A.[LeaveFlag] LeaveFlag, case when a.[ExpectedAtWork] in( 'Y','N') \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " and a.[LeaveFlag] in ('A','AW') then 1 else 0 end as awop5, a.TheDate \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " ,[expectedatwork] ne, b.[resource name] resourcename \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " from BonusControl.dbo.Import_BMCS_Clocking_Total a left outer join \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " [DBSYMNHM-ZON].symnhm.[dbo].[Resource Information] b   on a.IndustryNumber = b.[Resource Reference] \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " where TheDate >= '" + String.Format("{0:yyyy-MM-dd}", StartDate.Value) + "' \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " and TheDate <= '" + String.Format("{0:yyyy-MM-dd}", EndDate.Value) + "' \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " and [Resource Reference] in ( \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " "+indNum+" \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " )) \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " b on a.industrynumber = b.[Resource Reference] and a.date = b.thedate \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " left outer join \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + "  (select distinct B.[Resource Reference] ind, Count(A.[LeaveFlag]) awops \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " from BonusControl.dbo.Import_BMCS_Clocking_Total a left outer join \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " [DBSYMNHM-ZON].symnhm.[dbo].[Resource Information] b  \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + "  on a.IndustryNumber = b.[Resource Reference] \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " where TheDate >= '" + String.Format("{0:yyyy-MM-dd}", StartDate.Value) + "' \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " and TheDate <= '" + String.Format("{0:yyyy-MM-dd}", EndDate.Value) + "' \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " and b.[Resource Reference] in \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " ( \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " "+indNum+" \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " )  and [expectedatwork] = 'Y' and [LeaveFlag] in ('A','AW') group by B.[Resource Reference]) \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " c on a.industrynumber = c.[ind] \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " Order by a.aa, a.industrynumber, a.date \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " \r\n ";
                _dbManData.SqlStatement = _dbManData.SqlStatement + " \r\n ";

                _dbManData.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbManData.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbManData.ExecuteInstruction();
                int TLRow = 0;
                int RDO1Row = 11;
                int RDO2Row = 33;
                int OtherStopeRow = 65;

                int NightTLRow = 99;
                int NightOtherRow = 111;
                string IndustryNum = "";

                int CountAwops = 0;

                TimeSpan DayDiff;

                int DayCol = 0;

                int CountShifts = 0;

                TotalDSAwops = 0;
                TotalNSAwops = 0; ;

                foreach (DataRow dr in _dbManData.ResultsDataTable.Rows)
                {
                    DayDiff = Convert.ToDateTime(dr["date"].ToString()) - StartDate.Value;
                    DayCol = DayDiff.Days + 2;

                   

                    if (dr["Shift"].ToString() == "D") /////////////// Start of Shift check///////////////////
                    {
                        CrewGrid1.Rows[0].Cells[0].Value = "Team Leader";
                        CrewGrid1.Rows[1].Cells[0].Value = "   ";
                        CrewGrid1.Rows[2].Cells[0].Value = ".";
                        CrewGrid1.Rows[0].Cells[59].Value = "Y";
                        CrewGrid1.Rows[1].Cells[59].Value = "Y";
                        CrewGrid1.Rows[2].Cells[59].Value = "Y";

                        if (dr["aa"].ToString() == "1")
                        {

                            //CrewGrid1.Rows[0].Cells[0].Value = "Team Leader";
                            //CrewGrid1.Rows[1].Cells[0].Value = "   ";
                            //CrewGrid1.Rows[2].Cells[0].Value = ".";
                            //CrewGrid1.Rows[0].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[1].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[2].Cells[59].Value = "Y";


                            if (dr["industrynumber"].ToString() != IndustryNum)
                            {

                                IndustryNum = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[TLRow].Cells[1].Value = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[TLRow].Cells[58].Value = dr["Category"].ToString();
                                CrewGrid1.Rows[TLRow].Cells[59].Value = "Y";
                                CrewGrid1.Rows[TLRow].Cells[60].Value = dr["Shift"].ToString();

                                CrewGrid1.Rows[TLRow].Cells[61].Value = dr["Surname"].ToString();
                                CrewGrid1.Rows[TLRow].Cells[62].Value = dr["Initials"].ToString();

                                // CrewGrid1.Rows[TLRow].Cells[48].Value = CountShifts;

                                CountShifts = 0;
                                CountAwops = 0;


                                CrewGrid1.Rows[TLRow].Cells[DayCol].Value = dr["LeaveFlag"].ToString();



                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[TLRow].Cells[48].Value = CountShifts;
                                    TotalDSShifts = TotalDSShifts + 1;

                                    CrewGrid1.Rows[TLRow].Cells[DayCol].Style.ForeColor = Color.Black;
                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                    // CountShifts = CountShifts - 1;
                                    //CrewGrid1.Rows[TLRow].Cells[48].Value = CountShifts;
                                    CountAwops = CountAwops + 1;
                                    TotalDSAwops = TotalDSAwops + 1;
                                    CrewGrid1.Rows[TLRow].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[TLRow].Cells[DayCol].Style.ForeColor = Color.Red;

                                }
                                TLRow = TLRow + 1;
                                //count = count + 1;
                            }
                            else
                            {
                                CrewGrid1.Rows[TLRow - 1].Cells[DayCol].Value = dr["LeaveFlag"].ToString();



                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[TLRow - 1].Cells[48].Value = CountShifts;
                                    TotalDSShifts = TotalDSShifts + 1;
                                    CrewGrid1.Rows[TLRow - 1].Cells[DayCol].Style.ForeColor = Color.Black;
                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                   
                                    CountAwops = CountAwops + 1;
                                    TotalDSAwops = TotalDSAwops + 1;
                                    CrewGrid1.Rows[TLRow - 1].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[TLRow - 1].Cells[DayCol].Style.ForeColor = Color.Red;

                                }
                            }




                        }

                        CrewGrid1.Rows[11].Cells[0].Value = "Mach. Oper. RDO";
                        CrewGrid1.Rows[12].Cells[0].Value = "   ";
                        CrewGrid1.Rows[13].Cells[0].Value = ".";
                        CrewGrid1.Rows[11].Cells[59].Value = "Y";
                        CrewGrid1.Rows[12].Cells[59].Value = "Y";
                        CrewGrid1.Rows[13].Cells[59].Value = "Y";

                        if (dr["aa"].ToString() == "2")
                        {


                            //CrewGrid1.Rows[11].Cells[0].Value = "Mach. Oper. RDO1";
                            //CrewGrid1.Rows[12].Cells[0].Value = "   ";
                            //CrewGrid1.Rows[13].Cells[0].Value = ".";
                            //CrewGrid1.Rows[11].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[12].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[13].Cells[59].Value = "Y";


                            if (dr["industrynumber"].ToString() != IndustryNum)
                            {
                                CountShifts = 0;
                                CountAwops = 0;
                                IndustryNum = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[RDO1Row].Cells[1].Value = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[RDO1Row].Cells[58].Value = dr["Category"].ToString();
                                CrewGrid1.Rows[RDO1Row].Cells[59].Value = "Y";
                                CrewGrid1.Rows[RDO1Row].Cells[60].Value = dr["Shift"].ToString();

                                CrewGrid1.Rows[RDO1Row].Cells[61].Value = dr["Surname"].ToString();
                                CrewGrid1.Rows[RDO1Row].Cells[62].Value = dr["Initials"].ToString();

                                CrewGrid1.Rows[RDO1Row].Cells[DayCol].Value = dr["LeaveFlag"].ToString();



                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[RDO1Row].Cells[48].Value = CountShifts;
                                    TotalDSShifts = TotalDSShifts + 1;
                                    CrewGrid1.Rows[RDO1Row].Cells[DayCol].Style.ForeColor = Color.Black;
                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                   
                                    CountAwops = CountAwops + 1;
                                    TotalDSAwops = TotalDSAwops + 1;
                                    CrewGrid1.Rows[RDO1Row].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[RDO1Row].Cells[DayCol].Style.ForeColor = Color.Red;

                                }

                                RDO1Row = RDO1Row + 1;
                            }
                            else
                            {
                                CrewGrid1.Rows[RDO1Row - 1].Cells[DayCol].Value = dr["LeaveFlag"].ToString();



                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[RDO1Row - 1].Cells[48].Value = CountShifts;
                                    TotalDSShifts = TotalDSShifts + 1;
                                    CrewGrid1.Rows[RDO1Row - 1].Cells[DayCol].Style.ForeColor = Color.Black;
                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                    
                                    CountAwops = CountAwops + 1;
                                    TotalDSAwops = TotalDSAwops + 1;
                                    CrewGrid1.Rows[RDO1Row - 1].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[RDO1Row - 1].Cells[DayCol].Style.ForeColor = Color.Red;

                                }
                            }




                        }

                        CrewGrid1.Rows[33].Cells[0].Value = "Mach. Oper. RDO";
                        CrewGrid1.Rows[34].Cells[0].Value = "   ";
                        CrewGrid1.Rows[35].Cells[0].Value = ".";
                        CrewGrid1.Rows[33].Cells[59].Value = "Y";
                        CrewGrid1.Rows[34].Cells[59].Value = "Y";
                        CrewGrid1.Rows[35].Cells[59].Value = "Y";

                        if (dr["aa"].ToString() == "3")
                        {


                            //CrewGrid1.Rows[33].Cells[0].Value = "Mach. Oper. RDO2";
                            //CrewGrid1.Rows[34].Cells[0].Value = "   ";
                            //CrewGrid1.Rows[35].Cells[0].Value = ".";
                            //CrewGrid1.Rows[33].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[34].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[35].Cells[59].Value = "Y";


                            if (dr["industrynumber"].ToString() != IndustryNum)
                            {
                                CountShifts = 0;
                                CountAwops = 0;
                                IndustryNum = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[RDO2Row].Cells[1].Value = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[RDO2Row].Cells[58].Value = dr["Category"].ToString();
                                CrewGrid1.Rows[RDO2Row].Cells[58].Value = "Y";
                                CrewGrid1.Rows[RDO2Row].Cells[60].Value = dr["Shift"].ToString();
                                CrewGrid1.Rows[RDO2Row].Cells[DayCol].Value = dr["LeaveFlag"].ToString();

                                CrewGrid1.Rows[RDO2Row].Cells[61].Value = dr["Surname"].ToString();
                                CrewGrid1.Rows[RDO2Row].Cells[62].Value = dr["Initials"].ToString();



                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[RDO2Row].Cells[48].Value = CountShifts;
                                    TotalDSShifts = TotalDSShifts + 1;
                                    CrewGrid1.Rows[RDO2Row].Cells[DayCol].Style.ForeColor = Color.Black;
                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                   
                                    CountAwops = CountAwops + 1;
                                    TotalDSAwops = TotalDSAwops + 1;
                                    CrewGrid1.Rows[RDO2Row].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[RDO2Row].Cells[DayCol].Style.ForeColor = Color.Red;

                                }

                                CrewGrid1.Rows[RDO2Row].Cells[59].Value = "Y";
                                RDO2Row = RDO2Row + 1;
                            }
                            else
                            {
                                CrewGrid1.Rows[RDO2Row - 1].Cells[DayCol].Value = dr["LeaveFlag"].ToString();



                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[RDO2Row - 1].Cells[48].Value = CountShifts;
                                    TotalDSShifts = TotalDSShifts + 1;
                                    CrewGrid1.Rows[RDO2Row - 1].Cells[DayCol].Style.ForeColor = Color.Black;
                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                    
                                    CountAwops = CountAwops + 1;
                                    TotalDSAwops = TotalDSAwops + 1;
                                    CrewGrid1.Rows[RDO2Row - 1].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[RDO2Row - 1].Cells[DayCol].Style.ForeColor = Color.Red;

                                }
                            }




                        }

                        CrewGrid1.Rows[65].Cells[0].Value = "Other Stoping";
                        CrewGrid1.Rows[66].Cells[0].Value = "   ";
                        CrewGrid1.Rows[67].Cells[0].Value = ".";
                        CrewGrid1.Rows[65].Cells[59].Value = "Y";
                        CrewGrid1.Rows[66].Cells[59].Value = "Y";
                        CrewGrid1.Rows[67].Cells[59].Value = "Y";

                        if (dr["aa"].ToString() == "4")
                        {


                            //CrewGrid1.Rows[65].Cells[0].Value = "Other Stoping";
                            //CrewGrid1.Rows[66].Cells[0].Value = "   ";
                            //CrewGrid1.Rows[67].Cells[0].Value = ".";
                            //CrewGrid1.Rows[65].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[66].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[67].Cells[59].Value = "Y";


                            if (dr["industrynumber"].ToString() != IndustryNum)
                            {
                                CountShifts = 0;
                                CountAwops = 0;
                                IndustryNum = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[OtherStopeRow].Cells[1].Value = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[OtherStopeRow].Cells[58].Value = dr["Category"].ToString();
                                CrewGrid1.Rows[OtherStopeRow].Cells[60].Value = dr["Shift"].ToString();
                                CrewGrid1.Rows[OtherStopeRow].Cells[DayCol].Value = dr["LeaveFlag"].ToString();

                                CrewGrid1.Rows[OtherStopeRow].Cells[61].Value = dr["Surname"].ToString();
                                CrewGrid1.Rows[OtherStopeRow].Cells[62].Value = dr["Initials"].ToString();



                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[OtherStopeRow].Cells[48].Value = CountShifts;
                                    TotalDSShifts = TotalDSShifts + 1;
                                    CrewGrid1.Rows[OtherStopeRow].Cells[DayCol].Style.ForeColor = Color.Black;
                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                  
                                    CountAwops = CountAwops + 1;
                                    TotalDSAwops = TotalDSAwops + 1;
                                    CrewGrid1.Rows[OtherStopeRow].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[OtherStopeRow].Cells[DayCol].Style.ForeColor = Color.Red;

                                }

                                CrewGrid1.Rows[OtherStopeRow].Cells[59].Value = "Y";
                                OtherStopeRow = OtherStopeRow + 1;
                            }
                            else
                            {
                                CrewGrid1.Rows[OtherStopeRow - 1].Cells[DayCol].Value = dr["LeaveFlag"].ToString();
                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[OtherStopeRow - 1].Cells[48].Value = CountShifts;
                                    TotalDSShifts = TotalDSShifts + 1;
                                    CrewGrid1.Rows[OtherStopeRow - 1].Cells[DayCol].Style.ForeColor = Color.Black;

                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                   
                                    CountAwops = CountAwops + 1;
                                    TotalDSAwops = TotalDSAwops + 1;
                                    CrewGrid1.Rows[OtherStopeRow - 1].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[OtherStopeRow - 1].Cells[DayCol].Style.ForeColor = Color.Red;

                                }
                            }




                        }
                    }////////////////////////////////End of Shift check/////////////////////////////////
                    else
                    {

                        CrewGrid1.Rows[98].Cells[0].Value = "Night Shift";

                        CrewGrid1.Rows[99].Cells[0].Value = "Team Leader";
                        CrewGrid1.Rows[100].Cells[0].Value = "   ";
                        CrewGrid1.Rows[101].Cells[0].Value = ".";
                        CrewGrid1.Rows[99].Cells[59].Value = "Y";
                        CrewGrid1.Rows[100].Cells[59].Value = "Y";
                        CrewGrid1.Rows[101].Cells[59].Value = "Y";

                        if (dr["aa"].ToString() == "1")
                        {

                            //CrewGrid1.Rows[99].Cells[0].Value = "Team Leader";
                            //CrewGrid1.Rows[100].Cells[0].Value = "   ";
                            //CrewGrid1.Rows[101].Cells[0].Value = ".";
                            //CrewGrid1.Rows[99].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[100].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[101].Cells[59].Value = "Y";


                            if (dr["industrynumber"].ToString() != IndustryNum)
                            {

                                IndustryNum = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[NightTLRow].Cells[1].Value = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[NightTLRow].Cells[58].Value = dr["Category"].ToString();
                                CrewGrid1.Rows[NightTLRow].Cells[60].Value = dr["Shift"].ToString();
                                CrewGrid1.Rows[NightTLRow].Cells[59].Value = "Y";

                                CrewGrid1.Rows[NightTLRow].Cells[61].Value = dr["Surname"].ToString();
                                CrewGrid1.Rows[NightTLRow].Cells[62].Value = dr["Initials"].ToString();
                                

                                CountShifts = 0;
                                CountAwops = 0;


                                CrewGrid1.Rows[NightTLRow].Cells[DayCol].Value = dr["LeaveFlag"].ToString();



                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[NightTLRow].Cells[48].Value = CountShifts;
                                    TotalNSShifts = TotalNSShifts + 1;
                                    CrewGrid1.Rows[NightTLRow].Cells[DayCol].Style.ForeColor = Color.Black;
                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                    
                                    CountAwops = CountAwops + 1;
                                    TotalNSAwops = TotalNSAwops + 1;
                                    CrewGrid1.Rows[NightTLRow].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[NightTLRow].Cells[DayCol].Style.ForeColor = Color.Red;

                                }
                                NightTLRow = NightTLRow + 1;
                                //count = count + 1;
                            }
                            else
                            {
                                CrewGrid1.Rows[NightTLRow - 1].Cells[DayCol].Value = dr["LeaveFlag"].ToString();



                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[NightTLRow - 1].Cells[48].Value = CountShifts;
                                    TotalNSShifts = TotalNSShifts + 1;
                                    CrewGrid1.Rows[NightTLRow - 1].Cells[DayCol].Style.ForeColor = Color.Black;
                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                    
                                    CountAwops = CountAwops + 1;
                                    TotalNSAwops = TotalNSAwops + 1;
                                    CrewGrid1.Rows[NightTLRow - 1].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[NightTLRow - 1].Cells[DayCol].Style.ForeColor = Color.Red;

                                }
                            }
                    }///////////////////////End of TL Check/////////////////////



                        CrewGrid1.Rows[111].Cells[0].Value = "Other Stoping";
                        CrewGrid1.Rows[112].Cells[0].Value = "   ";
                        CrewGrid1.Rows[113].Cells[0].Value = ".";
                        CrewGrid1.Rows[111].Cells[59].Value = "Y";
                        CrewGrid1.Rows[112].Cells[59].Value = "Y";
                        CrewGrid1.Rows[113].Cells[59].Value = "Y";

                        if (Convert.ToInt16(dr["aa"].ToString()) > 1)
                        {


                            //CrewGrid1.Rows[111].Cells[0].Value = "Other Stoping";
                            //CrewGrid1.Rows[112].Cells[0].Value = "   ";
                            //CrewGrid1.Rows[113].Cells[0].Value = ".";
                            //CrewGrid1.Rows[111].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[112].Cells[59].Value = "Y";
                            //CrewGrid1.Rows[113].Cells[59].Value = "Y";


                            if (dr["industrynumber"].ToString() != IndustryNum)
                            {
                                CountShifts = 0;
                                CountAwops = 0;
                                IndustryNum = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[NightOtherRow].Cells[1].Value = dr["industrynumber"].ToString();
                                CrewGrid1.Rows[NightOtherRow].Cells[58].Value = dr["Category"].ToString();
                                CrewGrid1.Rows[NightOtherRow].Cells[60].Value = dr["Shift"].ToString();
                                CrewGrid1.Rows[NightOtherRow].Cells[DayCol].Value = dr["LeaveFlag"].ToString();

                                CrewGrid1.Rows[NightOtherRow].Cells[61].Value = dr["Surname"].ToString();
                                CrewGrid1.Rows[NightOtherRow].Cells[62].Value = dr["Initials"].ToString();



                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[NightOtherRow].Cells[48].Value = CountShifts;
                                    TotalNSShifts = TotalNSShifts + 1;
                                    CrewGrid1.Rows[NightOtherRow].Cells[DayCol].Style.ForeColor = Color.Black;
                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                    TotalNSAwops = TotalNSAwops + 1;
                                    CountAwops = CountAwops + 1;
                                    CrewGrid1.Rows[NightOtherRow].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[NightOtherRow].Cells[DayCol].Style.ForeColor = Color.Red;

                                }

                                CrewGrid1.Rows[NightOtherRow].Cells[59].Value = "Y";
                                NightOtherRow = NightOtherRow + 1;
                            }
                            else
                            {
                                CrewGrid1.Rows[NightOtherRow - 1].Cells[DayCol].Value = dr["LeaveFlag"].ToString();
                                if ((dr["LeaveFlag"].ToString() == "N") || (dr["LeaveFlag"].ToString() == "NA"))
                                {
                                    CountShifts = CountShifts + 1;
                                    CrewGrid1.Rows[NightOtherRow - 1].Cells[48].Value = CountShifts;
                                    TotalNSShifts = TotalNSShifts + 1;
                                    CrewGrid1.Rows[NightOtherRow - 1].Cells[DayCol].Style.ForeColor = Color.Black;

                                }

                                if ((dr["LeaveFlag"].ToString() == "A") || (dr["LeaveFlag"].ToString() == "AW"))
                                {
                                    TotalNSAwops = TotalNSAwops + 1;
                                    CountAwops = CountAwops + 1;
                                    CrewGrid1.Rows[NightOtherRow - 1].Cells[49].Value = CountAwops;

                                    CrewGrid1.Rows[NightOtherRow - 1].Cells[DayCol].Style.ForeColor = Color.Red;

                                }
                            }
                        }///////////////////////End of Other Stoping check//////////////////////////////




                    }//////////////////////////////////////End of Night Shift Else////////////////////////

                    
                }

                //CrewGrid1.RowCount = NightOtherRow;

            }
            

            /////////////////////////////////////////Do Awops////////////////////////////

            MWDataManager.clsDataAccess _dbManAwops = new MWDataManager.clsDataAccess();
            _dbManAwops.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
            _dbManAwops.SqlStatement = _dbManAwops.SqlStatement + "  select a.TheDate date,a.IndustryNumber,a.Orgunit\r\n  ";
            _dbManAwops.SqlStatement = _dbManAwops.SqlStatement + " from dbo.Import_BMCS_Clocking_Total a left outer join\r\n  ";
            _dbManAwops.SqlStatement = _dbManAwops.SqlStatement + " [DBSYMNHM-ZON].symnhm.[dbo].[Resource Information] b   on a.IndustryNumber = b.[Resource Reference]\r\n  ";
            _dbManAwops.SqlStatement = _dbManAwops.SqlStatement + " where TheDate >= '" + String.Format("{0:yyyy-MM-dd}", StartDate.Value) + "'\r\n ";
            _dbManAwops.SqlStatement = _dbManAwops.SqlStatement + " and TheDate <= '" + String.Format("{0:yyyy-MM-dd}", EndDate.Value) + "'\r\n ";
            _dbManAwops.SqlStatement = _dbManAwops.SqlStatement + " and [Resource Reference] in (" + indNum + ")\r\n  ";
            _dbManAwops.SqlStatement = _dbManAwops.SqlStatement + " and [LeaveFlag] in ('A','AW') and [expectedatwork] = 'Y'\r\n ";
            _dbManAwops.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManAwops.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManAwops.ResultsTableName = "Stoping";
            _dbManAwops.ExecuteInstruction();

            

            int CountA = 0;

            TimeSpan Awop;

         

            foreach (DataRow dr in _dbManAwops.ResultsDataTable.Rows)
            {
                Awop = Convert.ToDateTime(dr["date"].ToString()) - StartDate.Value;

                CountA = Awop.Days + 2;

                for (int i = 0; i <= CrewGrid1.Rows.Count - 1; i++)
                {
                    if (CrewGrid1.Rows[i].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[i].Cells[1].Value.ToString() == dr["IndustryNumber"].ToString())
                        {
                            if (CrewGrid1.Rows[i].Cells[CountA].Value == null)
                            {
                                CrewGrid1.Rows[i].Cells[CountA].Value = "";
                            }

                            if ((CrewGrid1.Rows[i].Cells[CountA].Value.ToString() != "A"))
                            {
                                if ((CrewGrid1.Rows[i].Cells[CountA].Value.ToString() != "AW"))
                                {
                                    if ((CrewGrid1.Rows[i].Cells[CountA].Value.ToString() == "N") || (CrewGrid1.Rows[i].Cells[CountA].Value.ToString() == "NA"))
                                    {
                                        CrewGrid1.Rows[i].Cells[48].Value = Convert.ToInt32(CrewGrid1.Rows[i].Cells[48].Value) - 1;


                                        if (CrewGrid1.Rows[i].Cells[60].Value != null)
                                        {

                                            if (CrewGrid1.Rows[i].Cells[60].Value.ToString() == "D")
                                            {
                                                TotalDSShifts = TotalDSShifts - 1;
                                            }
                                            else
                                            {
                                                TotalNSShifts = TotalNSShifts - 1;
                                            }
                                        }




                                    }

                                    CrewGrid1.Rows[i].Cells[CountA].Value = "A";
                                    CrewGrid1.Rows[i].Cells[CountA].Style.ForeColor = Color.Red;

                                    //CrewGrid1.Rows[i].Cells[48].Value = Convert.ToInt32(CrewGrid1.Rows[i].Cells[48].Value) - 1;
                                    CrewGrid1.Rows[i].Cells[49].Value = Convert.ToInt32(CrewGrid1.Rows[i].Cells[49].Value) + 1;

                                    if (CrewGrid1.Rows[i].Cells[60].Value != null)
                                    {

                                        if (CrewGrid1.Rows[i].Cells[60].Value.ToString() == "D")
                                        {
                                            TotalDSAwops = TotalDSAwops + 1;
                                        }
                                        else
                                        {
                                            TotalNSAwops = TotalNSAwops + 1;
                                        }

                                        //if ((dr["OrgUnit"].ToString().Substring(6, 1) == "U") || (dr["OrgUnit"].ToString().Substring(6, 1) == "P"))
                                        //{
                                        //    TotalDSShifts = TotalDSShifts - 1;
                                        //}
                                        //else
                                        //{
                                        //    TotalNSShifts = TotalNSShifts - 1;
                                        //}
                                    }
                                }
                                    
                                
                            }

                           

                           

                        }
                    }

                   
                }
            }

            CrewGrid1.Rows[97].Cells[0].Value = "Total DayShift";
            if (TotalDSShifts == 0)
            {
                CrewGrid1.Rows[97].Cells[48].Value = "0";
            }
            else
            {
                CrewGrid1.Rows[97].Cells[48].Value = TotalDSShifts.ToString();
            }

            if (TotalDSAwops == 0)
            {
                CrewGrid1.Rows[97].Cells[49].Value = "0";
            }
            else
            {

                CrewGrid1.Rows[97].Cells[49].Value = TotalDSAwops.ToString();
            }
            CrewGrid1.Rows[97].Cells[59].Value = "Y";

            CrewGrid1.Rows[143].Cells[0].Value = "Total NightShift";
            if (TotalNSShifts == 0)
            {
                CrewGrid1.Rows[143].Cells[48].Value = "0";
            }
            else
            {
                CrewGrid1.Rows[143].Cells[48].Value = TotalNSShifts.ToString();
            }

            if (TotalNSAwops == 0)
            {
                CrewGrid1.Rows[143].Cells[49].Value = "0";
            }
            else
            {

                CrewGrid1.Rows[143].Cells[49].Value = TotalNSAwops.ToString();
            }
            CrewGrid1.Rows[143].Cells[59].Value = "Y";

            CrewGrid1.Rows[144].Cells[0].Value = "Total ProductionUnit";
            CrewGrid1.Rows[144].Cells[48].Value = TotalNSShifts + TotalDSShifts;
            CrewGrid1.Rows[144].Cells[49].Value = TotalNSAwops + TotalDSAwops;
            CrewGrid1.Rows[144].Cells[59].Value = "Y";

            CrewGrid1.RowCount = 146;


            if (Convert.ToInt32(CrewGrid1.Rows[144].Cells[48].Value) * Convert.ToInt32(PosShiftsLbl.Text) > 0)
            {
                AvgEmpLbl.Text = Convert.ToString(Math.Round((Convert.ToDecimal(CrewGrid1.Rows[144].Cells[48].Value) / Convert.ToInt32(PosShiftsLbl.Text)) + Convert.ToDecimal(0.01), 0));
            }
            else
            {
                AvgEmpLbl.Text = "0";
            }


           
            

            ///////////////////////////////// Incentive Pay Sqm///////////////////

            if (rdbStoping.Checked == true)
            {
                MWDataManager.clsDataAccess _dbManIncSqm = new MWDataManager.clsDataAccess();
                _dbManIncSqm.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                if (ReefTypelbl.Text == "Mer")
                {

                    
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " Select max(BIPStopingAmount) BIPStopingAmount \r\n  ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " from dbo.BMCS_BIPStopingMer \r\n  ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " where BIPStopingSQM < " + (Convert.ToInt32(TotalWPSqmLbl.Text) + 20) + " \r\n  ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " and BIPStopingAvgEmp = " + Convert.ToInt32(AvgEmpLbl.Text) + " \r\n ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " and ProdMonth = '" + ProdMonthTxt.Value + "' \r\n ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " \r\n  ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " \r\n ";
                    
                }
                else
                {
                   
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " Select max(BIPStopingAmount) BIPStopingAmount \r\n  ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " from dbo.BMCS_BIPStoping \r\n  ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " where BIPStopingSQM < " + (Convert.ToInt32(TotalWPSqmLbl.Text) + 20) + " \r\n  ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " and BIPStopingAvgEmp = " + Convert.ToInt32(AvgEmpLbl.Text) + " \r\n ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " and ProdMonth = '" + ProdMonthTxt.Value + "' \r\n ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " \r\n  ";
                    _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " \r\n ";
                   
                }
                _dbManIncSqm.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbManIncSqm.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbManIncSqm.ResultsTableName = "Stoping";
                _dbManIncSqm.ExecuteInstruction();

                IncentiveSqmLbl.Text = _dbManIncSqm.ResultsDataTable.Rows[0][0].ToString();

            }

            if (rdbRCrew.Checked == true)
            {

                MWDataManager.clsDataAccess _dbManIncSqm = new MWDataManager.clsDataAccess();
                _dbManIncSqm.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " Select max(BIPStopingAmount) BIPStopingAmount \r\n  ";
                _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " from dbo.BMCS_BIPStopingRCrews \r\n  ";
                _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " where BIPStopingSQM <= " + (Convert.ToInt32(TotalWPSqmLbl.Text) + 20) + " \r\n  ";
                _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " and BIPStopingAvgEmp = " + Convert.ToInt32(AvgEmpLbl.Text) + " \r\n ";
                _dbManIncSqm.SqlStatement = _dbManIncSqm.SqlStatement + " and ProdMonth = '" + ProdMonthTxt.Value + "' \r\n ";
                _dbManIncSqm.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbManIncSqm.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbManIncSqm.ResultsTableName = "Stoping";
                _dbManIncSqm.ExecuteInstruction();

                if (ReefTypelbl.Text == "Mer")
                {

                   IncentiveSqmLbl.Text = Convert.ToString((Convert.ToInt32(_dbManIncSqm.ResultsDataTable.Rows[0][0].ToString()) * Convert.ToDecimal(MerBonusLbl.Text)) / 100 + Convert.ToInt32(_dbManIncSqm.ResultsDataTable.Rows[0][0].ToString()));
                }
                else
                {
                    IncentiveSqmLbl.Text =_dbManIncSqm.ResultsDataTable.Rows[0][0].ToString();
                }

            }

            if (rdbZCrew.Checked == true)
            {
                IncentiveSqmLbl.Text = TotalWPSqmLbl.Text;
            }

            if ((rdbConstCrew.Checked == true) || (rdbXCCrew.Checked == true) || (rdbDevRailCrew.Checked == true) || (rdbDevTransCrew.Checked == true) || (rdbDevCleanCrew.Checked == true) || (rdbDevConCrew.Checked == true))
            {
                IncentiveSqmLbl.Text = Convert.ToString(Math.Round(Convert.ToDouble(TotalWPSqmLbl.Text) * 0.8,2));
            }


            if (rdbDev.Checked == true)
            {
                MWDataManager.clsDataAccess _dbManIncM = new MWDataManager.clsDataAccess();
                _dbManIncM.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                if (DevTypeLbl.Text == "Raise")
                {
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " Select max(BIPDevRaisesAmount) BIPDevRaisesAmount \r\n  ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " from BMCS_BIPDevRaises \r\n  ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " where  BIPDevRaisesSQM <= '" + Math.Round(Convert.ToDouble(TotalWPSqmLbl.Text) + 0.1, 0) + "' \r\n  ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " and  BIPDevRaisesAvgEmp = '"+ Math.Round(Convert.ToDouble(AvgEmpLbl.Text),0)+"' \r\n ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " and ProdMonth = '"+ProdMonthTxt.Value+"' \r\n ";

                    _dbManIncM.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                    _dbManIncM.queryReturnType = MWDataManager.ReturnType.DataTable;
                    _dbManIncM.ResultsTableName = "Dev";
                    _dbManIncM.ExecuteInstruction();


                    IncentiveSqmLbl.Text = Convert.ToString(Convert.ToDouble(_dbManIncM.ResultsDataTable.Rows[0][0].ToString()) * RaiseBoreFactor);

                    IncentiveSqmLbl.Text = String.Format("{0:0.00}",IncentiveSqmLbl.Text);
                }

                if (DevTypeLbl.Text == "FWD")
                {
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " Select max(BIPDevLateralAmount) BIPDevRaisesAmount \r\n  ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " from BMCS_BIPDevLateral \r\n  ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " where  BIPDevLateralSQM <= '" + Math.Round(Convert.ToDouble(TotalWPSqmLbl.Text), 0) + "' \r\n  ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " and  BIPDevLateralAvgEmp = '" + AvgEmpLbl.Text + "' \r\n ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " and ProdMonth = '" + ProdMonthTxt.Value + "' \r\n ";

                    _dbManIncM.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                    _dbManIncM.queryReturnType = MWDataManager.ReturnType.DataTable;
                    _dbManIncM.ResultsTableName = "Dev";
                    _dbManIncM.ExecuteInstruction();


                    IncentiveSqmLbl.Text = Convert.ToString(Convert.ToDouble(_dbManIncM.ResultsDataTable.Rows[0][0].ToString()) );

                    IncentiveSqmLbl.Text = String.Format("{0:0.00}", IncentiveSqmLbl.Text);
                  
                }

                if (DevTypeLbl.Text == "BH")
                {
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " Select max(BIPDevBHAmount) BIPDevRaisesAmount \r\n  ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " from BMCS_BIPDevBoxHole \r\n  ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " where  BIPDevBHSQM <= '" + Math.Round(Convert.ToDouble(TotalWPSqmLbl.Text),0) + "' \r\n  ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " and  BIPDevBHAvgEmp = '" + AvgEmpLbl.Text + "' \r\n ";
                    _dbManIncM.SqlStatement = _dbManIncM.SqlStatement + " and ProdMonth = '" + ProdMonthTxt.Value + "' \r\n ";

                    _dbManIncM.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                    _dbManIncM.queryReturnType = MWDataManager.ReturnType.DataTable;
                    _dbManIncM.ResultsTableName = "Dev";
                    _dbManIncM.ExecuteInstruction();


                    IncentiveSqmLbl.Text = Convert.ToString(Convert.ToDouble(_dbManIncM.ResultsDataTable.Rows[0][0].ToString()));

                    IncentiveSqmLbl.Text = String.Format("{0:0.00}", IncentiveSqmLbl.Text);

                }

              
            }


            /////////////////////////////////////////////////////////////////////


            /////////////////////////////Sweeps Incentive ////////////////////////////////

            MWDataManager.clsDataAccess _dbManIncSweeps = new MWDataManager.clsDataAccess();
            _dbManIncSweeps.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
            _dbManIncSweeps.SqlStatement = _dbManIncSweeps.SqlStatement + " Select max(BIPStopingAmount) BIPStopingAmount \r\n  ";
            _dbManIncSweeps.SqlStatement = _dbManIncSweeps.SqlStatement + " from dbo.BMCS_BIPStopingsw \r\n  ";
            _dbManIncSweeps.SqlStatement = _dbManIncSweeps.SqlStatement + " where BIPStopingSQM <= " + (Convert.ToInt32(TotalSweepsLbl.Text) + 20) + " \r\n  ";
            _dbManIncSweeps.SqlStatement = _dbManIncSweeps.SqlStatement + " and BIPStopingAvgEmp = " + Convert.ToInt32(AvgEmpLbl.Text) + " \r\n ";
            _dbManIncSweeps.SqlStatement = _dbManIncSweeps.SqlStatement + " and ProdMonth = '" + ProdMonthTxt.Value + "' \r\n ";
            _dbManIncSweeps.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManIncSweeps.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManIncSweeps.ResultsTableName = "Stoping";
            _dbManIncSweeps.ExecuteInstruction();

            if (rdbStoping.Checked == true)
            {

                IncentiveSweepsLbl.Text = _dbManIncSweeps.ResultsDataTable.Rows[0][0].ToString();
            }
            if(rdbZCrew.Checked == true)
            {
                IncentiveSweepsLbl.Text = "0";
            }

            if (rdbConstCrew.Checked == true)
            {
                IncentiveSweepsLbl.Text = "0";
            }

            if (rdbXCCrew.Checked == true)
            {
                IncentiveSweepsLbl.Text = "0";
            }

            if (rdbDev.Checked == true)
            {
                IncentiveSweepsLbl.Text = "0.00";
            }

            if ((rdbDevRailCrew.Checked == true) || (rdbDevTransCrew.Checked == true) || (rdbDevCleanCrew.Checked == true) || (rdbDevConCrew.Checked == true))
            {
                IncentiveSweepsLbl.Text = "0.00";
            }



            if (WaterEndApplied == "Y")
            {
                MWDataManager.clsDataAccess _dbManWater = new MWDataManager.clsDataAccess();
                _dbManWater.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbManWater.SqlStatement = _dbManWater.SqlStatement + " Select max(BIPDevLateralAmount) BIPDevLateralAmount \r\n  ";
                _dbManWater.SqlStatement = _dbManWater.SqlStatement + " from BMCS_BIPDevLateralWaterEnds \r\n  ";
                _dbManWater.SqlStatement = _dbManWater.SqlStatement + " where BIPDevLateralSQM <= '" + Math.Round(Convert.ToDouble(TotalWPSqmLbl.Text), 0) + "' \r\n  ";
                _dbManWater.SqlStatement = _dbManWater.SqlStatement + " and BIPDevLateralAvgEmp = " + Convert.ToInt32(AvgEmpLbl.Text) + " \r\n ";
                _dbManWater.SqlStatement = _dbManWater.SqlStatement + " and ProdMonth = '" + ProdMonthTxt.Value + "' \r\n ";
                _dbManWater.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbManWater.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbManWater.ResultsTableName = "WaterEnd";
                _dbManWater.ExecuteInstruction();

                IncentiveSqmLbl.Text = Convert.ToString(Convert.ToDouble(_dbManWater.ResultsDataTable.Rows[0][0].ToString()));

                IncentiveSqmLbl.Text = String.Format("{0:0.00}", IncentiveSqmLbl.Text);
            }

          

            ///////////////////////////////////////////////////////////////////////////////

            //////////////////////Apply Factors to Total Sqm/////////////////////////////

            if (Convert.ToDecimal(TotalWPSqmLbl.Text) >= WaterEndMeters)
            {
                IncentiveSqmLbl.Text = Convert.ToString(Convert.ToDecimal(IncentiveSqmLbl.Text) * WaterEndFactor);

                IncentiveSqmLbl.Text = String.Format("{0:0.00}", IncentiveSqmLbl.Text);
            }


            //////////////////////////////////// Safety Deductions/////////////////////////////

            MWDataManager.clsDataAccess _dbManSafety = new MWDataManager.clsDataAccess();
            _dbManSafety.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
            _dbManSafety.SqlStatement = _dbManSafety.SqlStatement + " Select case when sum(ri) > 0 then SUM(ri) else 0 end as ri,  \r\n  ";
            _dbManSafety.SqlStatement = _dbManSafety.SqlStatement + " case when  sum(lti) > 0 then sum(lti) else 0 end as lti, \r\n  ";
            _dbManSafety.SqlStatement = _dbManSafety.SqlStatement + " case when sum(fatal) > 0 then sum(fatal) else 0 end as fatal,1 from BMCS_SafetyCapture \r\n  ";
            _dbManSafety.SqlStatement = _dbManSafety.SqlStatement + " where prodmonth = '"+ProdMonthTxt.Value+"' \r\n  ";
            _dbManSafety.SqlStatement = _dbManSafety.SqlStatement + " and orgunit in ('"+DsLbl.Text+"') \r\n  ";
            _dbManSafety.SqlStatement = _dbManSafety.SqlStatement + "  union \r\n ";
            _dbManSafety.SqlStatement = _dbManSafety.SqlStatement + " Select case when sum(ri) > 0 then SUM(ri) else 0 end as ri, \r\n ";
            _dbManSafety.SqlStatement = _dbManSafety.SqlStatement + " case when  sum(lti) > 0 then sum(lti) else 0 end as lti, \r\n  ";
            _dbManSafety.SqlStatement = _dbManSafety.SqlStatement + " case when sum(fatal) > 0 then sum(fatal) else 0 end as fatal,2 from BMCS_SafetyCapture \r\n  ";
            _dbManSafety.SqlStatement = _dbManSafety.SqlStatement + " where prodmonth = '" + ProdMonthTxt.Value + "'  \r\n ";
            _dbManSafety.SqlStatement = _dbManSafety.SqlStatement + "  and orgunit in  ('" + NSLbl.Text + "')\r\n ";
            _dbManSafety.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManSafety.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManSafety.ResultsTableName = "Stoping";
            _dbManSafety.ExecuteInstruction();

            DSLTILbl.Text = Convert.ToString(Convert.ToInt32(_dbManSafety.ResultsDataTable.Rows[0]["ri"].ToString()) + Convert.ToInt32(_dbManSafety.ResultsDataTable.Rows[0]["lti"].ToString()) + Convert.ToInt32(_dbManSafety.ResultsDataTable.Rows[0]["fatal"].ToString()));
            NSLTILbl.Text = Convert.ToString(Convert.ToInt32(_dbManSafety.ResultsDataTable.Rows[1]["ri"].ToString()) + Convert.ToInt32(_dbManSafety.ResultsDataTable.Rows[1]["lti"].ToString()) + Convert.ToInt32(_dbManSafety.ResultsDataTable.Rows[1]["fatal"].ToString()));

            DSRiLbl.Text = _dbManSafety.ResultsDataTable.Rows[0]["ri"].ToString();
            DSLtiSafeLbl.Text = _dbManSafety.ResultsDataTable.Rows[0]["lti"].ToString();
            DSFatalLbl.Text = _dbManSafety.ResultsDataTable.Rows[0]["fatal"].ToString();

            NSRiLbl.Text = _dbManSafety.ResultsDataTable.Rows[1]["ri"].ToString();
            NSLtiSafeLbl.Text = _dbManSafety.ResultsDataTable.Rows[1]["lti"].ToString();
            NSFatalLbl.Text = _dbManSafety.ResultsDataTable.Rows[1]["fatal"].ToString();

            double ZeroLTI = 0;
            double OneLTI = 0;
            double TwoLTI = 0;
            double ThreeLTI = 0;

            MWDataManager.clsDataAccess _dbManLTI = new MWDataManager.clsDataAccess();
            _dbManLTI.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
            _dbManLTI.SqlStatement = _dbManLTI.SqlStatement + " Select * from BMCS_Stoping_LTI where prodmonth = '"+ProdMonthTxt.Value+"'  \r\n  ";
            _dbManLTI.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManLTI.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManLTI.ResultsTableName = "Stoping";
            _dbManLTI.ExecuteInstruction();

            ZeroLTI = Convert.ToDouble(_dbManLTI.ResultsDataTable.Rows[0]["Cat_2_8_Zero_LTI"].ToString());
            OneLTI = Convert.ToDouble(_dbManLTI.ResultsDataTable.Rows[0]["Cat_2_8_1st_LTI"].ToString());
            TwoLTI = Convert.ToDouble(_dbManLTI.ResultsDataTable.Rows[0]["Cat_2_8_2nd_LTI"].ToString());
            ThreeLTI = Convert.ToDouble(_dbManLTI.ResultsDataTable.Rows[0]["Cat_2_8_3rd_LTI"].ToString());

            /////////////////////////////////////////////////////////////////////////////////////


            ////////////////// PRO Rata Payments///////////////////////////////////////////
            /////////////////Team Leader/////////////////////////////////////////////

            double TLDS = 0;
            double RDODS = 0;
            double OSDS = 0;
            double TLNS = 0;
            double OSNS = 0;
            double TotalTL = 0;
            double TotalOS = 0;

            double DSFinalPay = 0;
            double NSFinalPay = 0;
            double FinalPay = 0;

            double DSRDOPay = 0;
            double DSRDO1Pay = 0;
            

            int CalcShifts = 0;

            double TotalHoleBS = 0;
            double AvgRDO = 0;

            double DSltifactor = 0;
            double NSltifactor = 0;

            double DSRifactor = 0;
            double NSRifactor = 0;

            double DSFatalfactor = 0;
            double NSFatalfactor = 0;

            CrewGrid1.Rows[1].Cells[0].Value = "0";
            CrewGrid1.Rows[12].Cells[0].Value = "0";
            CrewGrid1.Rows[34].Cells[0].Value = "0";
            CrewGrid1.Rows[66].Cells[0].Value = "0";
            CrewGrid1.Rows[100].Cells[0].Value = "0";
            CrewGrid1.Rows[112].Cells[0].Value = "0";

            TotalHoleBS = (Convert.ToDouble(TotalWPSqmLbl.Text) * 7) * 1;
           // AvgRDO = (Convert.ToDouble(CrewGrid1.Rows[12].Cells[0].Value) + Convert.ToDouble(CrewGrid1.Rows[34].Cells[0].Value)) / Convert.ToDouble(PosShiftsLbl.Text);

            if(DSLtiSafeLbl.Text == "0")
            {
                DSltifactor = ZeroLTI;
            }

            if(DSLtiSafeLbl.Text == "1")
            {
                DSltifactor = OneLTI;
            }

             if(DSLtiSafeLbl.Text == "2")
            {
                DSltifactor = TwoLTI;
            }

             if(DSLtiSafeLbl.Text == "3")
            {
                DSltifactor = ThreeLTI;
            }

            if(Convert.ToInt32(DSLtiSafeLbl.Text) > 3)
            {
                DSltifactor = 0;
            }

            if (NSLtiSafeLbl.Text == "0")
            {
                NSltifactor = ZeroLTI;
            }

            if (NSLtiSafeLbl.Text == "1")
            {
                NSltifactor = OneLTI;
            }

            if (NSLtiSafeLbl.Text == "2")
            {
                NSltifactor = TwoLTI;
            }

            if (NSLtiSafeLbl.Text == "3")
            {
                NSltifactor = ThreeLTI;
            }

            if (Convert.ToInt32(NSLtiSafeLbl.Text) > 3)
            {
                NSltifactor = 0;
            }

            if (Convert.ToInt32(DSRiLbl.Text) > 0)
            {
                DSRifactor = 100;
            }

            if (Convert.ToInt32(NSRiLbl.Text) > 0)
            {
                NSRifactor = 100;
            }

            if (Convert.ToInt32(DSFatalLbl.Text) > 0)
            {
                DSFatalfactor = 100;
            }

            if (Convert.ToInt32(NSFatalLbl.Text) > 0)
            {
                NSFatalfactor = 100;
            }

            for (int t = 0; t <= 10; t++) ////////////// DayShift
            {
                if ((rdbStoping.Checked == true) || (rdbRCrew.Checked == true) || (rdbZCrew.Checked == true) || (rdbDev.Checked == true))//|| (rdbDevTransCrew.Checked == true)
                {
                    
                    if (CrewGrid1.Rows[t].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[t].Cells[1].Value.ToString() != "")
                        {
                            CrewGrid1.Rows[t].Cells[51].Value = 0;
                            CrewGrid1.Rows[t].Cells[52].Value = 0;
                            CrewGrid1.Rows[t].Cells[53].Value = 0;
                            CrewGrid1.Rows[t].Cells[54].Value = 0;


                            if (Convert.ToInt32(CrewGrid1.Rows[t].Cells[48].Value) > 0)
                            {
                                CrewGrid1.Rows[t].Cells[50].Value = (Convert.ToDouble(IncentiveSqmLbl.Text) + Convert.ToDouble(IncentiveSweepsLbl.Text)) / Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[t].Cells[48].Value) * Convert.ToDouble(TeamLeaderBonusLbl.Text);
                                CrewGrid1.Rows[t].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value), 2));
                                TLDS = TLDS + Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value);


                                //////////// Attendance Deduction////////////
                                if(Convert.ToInt32(CrewGrid1.Rows[t].Cells[49].Value) != 0)
                                {
                                    if ((Convert.ToDouble(AbscentBonusLbl.Text) * Convert.ToInt32(CrewGrid1.Rows[t].Cells[49].Value)) > 99)
                                    {
                                        CrewGrid1.Rows[t].Cells[52].Value = String.Format("{0:0.00}",CrewGrid1.Rows[t].Cells[50].Value);
                                    }
                                    else
                                    {
                                        CrewGrid1.Rows[t].Cells[52].Value = String.Format("{0:0.00}",Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value) * Convert.ToDouble(CrewGrid1.Rows[t].Cells[49].Value) * Convert.ToDouble(AbscentBonusLbl.Text) / 100);
                                    }
                                }
                                /////////////////////////////////////////////

                                /////////////Calc Total Shifts///////////////////
                                CrewGrid1.Rows[1].Cells[0].Style.BackColor = Color.Red;
                                CrewGrid1.Rows[1].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[1].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[t].Cells[48].Value);

                            }
                            else
                            {
                                CrewGrid1.Rows[t].Cells[50].Value = "0";
                            }
                        }
                    }
                }
                else
                {
                    if (Convert.ToInt32(AvgEmpLbl.Text) <= Comp)
                    {
                        CrewGrid1.Rows[t].Cells[50].Value = String.Format("{0:0.00}",(Convert.ToDouble(IncentiveSqmLbl.Text) * 2 * (Convert.ToDouble(CrewGrid1.Rows[t].Cells[48].Value) / Convert.ToDouble(PosShiftsLbl.Text))));
                        TLDS = TLDS + Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value);



                        CrewGrid1.Rows[1].Cells[0].Style.BackColor = Color.Red;
                        CrewGrid1.Rows[1].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[1].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[t].Cells[48].Value);
                    }
                    else
                    {
                        CrewGrid1.Rows[t].Cells[50].Value = ((Convert.ToDouble(IncentiveSqmLbl.Text) / Convert.ToDouble(AvgEmpLbl.Text)) * Comp) * 2 * (Convert.ToDouble(CrewGrid1.Rows[t].Cells[48].Value) / Convert.ToDouble(PosShiftsLbl.Text));
                        CrewGrid1.Rows[t].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value), 2));
                        TLDS = TLDS + Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value);

                        CrewGrid1.Rows[1].Cells[0].Style.BackColor = Color.Red;
                        CrewGrid1.Rows[1].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[1].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[t].Cells[48].Value);
                    }
                }


                //////////// Attendance Deduction////////////
                if (Convert.ToInt32(CrewGrid1.Rows[t].Cells[49].Value) != 0)
                {
                    if ((Convert.ToDouble(AbscentBonusLbl.Text) * Convert.ToInt32(CrewGrid1.Rows[t].Cells[49].Value)) > 99)
                    {
                        CrewGrid1.Rows[t].Cells[52].Value = CrewGrid1.Rows[t].Cells[50].Value;
                        CrewGrid1.Rows[t].Cells[52].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[52].Value), 0));
                    }
                    else
                    {
                        CrewGrid1.Rows[t].Cells[52].Value = Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value) * Convert.ToDouble(CrewGrid1.Rows[t].Cells[49].Value) * Convert.ToDouble(AbscentBonusLbl.Text) / 100;
                        CrewGrid1.Rows[t].Cells[52].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[52].Value), 0));
                    }
                }
                /////////////////////////////////////////////

                ////////////////Safety Deduction////////////////////////////////////////////

                if (DSRifactor != 0)
                {
                    CrewGrid1.Rows[t].Cells[51].Value = CrewGrid1.Rows[t].Cells[49].Value;
                }
                else
                {
                    if (Convert.ToInt32(DSLtiSafeLbl.Text) > 3)
                    {
                        CrewGrid1.Rows[t].Cells[51].Value = CrewGrid1.Rows[t].Cells[49].Value;
                    }
                    else
                    {
                        CrewGrid1.Rows[t].Cells[51].Value = 0;
                    }
                }

                if (DSFatalfactor != 0)
                {
                    CrewGrid1.Rows[t].Cells[51].Value = CrewGrid1.Rows[t].Cells[49].Value;
                }
                else
                {
                    CrewGrid1.Rows[t].Cells[51].Value = "0";
                }


                if ((DSRifactor + DSltifactor + DSFatalfactor) > 0)
                {
                    if (CrewGrid1.Rows[t].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[t].Cells[1].Value.ToString() != "")
                        {
                        }
                    }
                }



                ///////////////////////////////////////////////////////////////////////////

                if ((Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[53].Value)) * DSltifactor + Convert.ToDouble(CrewGrid1.Rows[t].Cells[54].Value) > 0)
                {
                    if ((rdbStoping.Checked == true) || (rdbRCrew.Checked == true) || (rdbXCCrew.Checked == true) || (rdbConstCrew.Checked == true) || (rdbDev.Checked == true) || (rdbDevRailCrew.Checked == true) || (rdbDevTransCrew.Checked == true) || (rdbDevCleanCrew.Checked == true) || (rdbDevConCrew.Checked == true))
                    {
                        CrewGrid1.Rows[t].Cells[57].Value = (Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[53].Value)) * DSltifactor + Convert.ToDouble(CrewGrid1.Rows[t].Cells[54].Value);
                        CrewGrid1.Rows[t].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value), 2));

                        DSFinalPay = DSFinalPay + Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value);
                    }
                    else
                    {
                        CrewGrid1.Rows[t].Cells[57].Value = (Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[53].Value)) + Convert.ToDouble(CrewGrid1.Rows[t].Cells[54].Value);
                        CrewGrid1.Rows[t].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value), 2));

                        DSFinalPay = DSFinalPay + Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value);
                    }
                }
                else
                {
                    CrewGrid1.Rows[t].Cells[57].Value = 0;
                }


                //////////////////////Final Safety Calc////////////////////

                if ((Convert.ToInt32(DSRiLbl.Text) + Convert.ToInt32(DSLtiSafeLbl.Text) + Convert.ToInt32(DSFatalLbl.Text)) > 0)
                {
                    if (CrewGrid1.Rows[t].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[t].Cells[1].Value.ToString() != "")
                        {
                            CrewGrid1.Rows[t].Cells[51].Value = String.Format("{0:0.00}",Math.Round(DSRifactor + DSltifactor * 100,0));

                            if (Convert.ToDouble(CrewGrid1.Rows[t].Cells[51].Value) > 99)
                            {
                                CrewGrid1.Rows[t].Cells[51].Value = 100;
                            }

                            CrewGrid1.Rows[t].Cells[53].Value = String.Format("{0:0.00}",Math.Round(DSFatalfactor,0));

                            if (Convert.ToDouble(CrewGrid1.Rows[t].Cells[53].Value) > 0)
                            {
                                CrewGrid1.Rows[t].Cells[53].Value = 100;
                            }


                            CrewGrid1.Rows[t].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value) - (Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value) * (Convert.ToDouble(CrewGrid1.Rows[t].Cells[53].Value) + Convert.ToDouble(CrewGrid1.Rows[t].Cells[51].Value)) / 100),2));
                            DSFinalPay = DSFinalPay + Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value);
                            if (Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value) < 0)
                            {
                                CrewGrid1.Rows[t].Cells[57].Value = "0.00";
                            }
                        }
                    }
                }

                ////////////////////////////////////////////////////////////


            }

            CalcShifts = 0;

            string endtypeid = "";


            if (rdbDev.Checked == true)
            {
                MWDataManager.clsDataAccess _dbManDevWP = new MWDataManager.clsDataAccess();
                _dbManDevWP.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbManDevWP.SqlStatement = _dbManDevWP.SqlStatement + " select * from NorthamPas.dbo.WORKPLACE where workplaceid = '"+Workplaceid+"'  \r\n  ";
                _dbManDevWP.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbManDevWP.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbManDevWP.ResultsTableName = "Stoping";
                _dbManDevWP.ExecuteInstruction();

                if(_dbManDevWP.ResultsDataTable.Rows.Count >0)
                {
                    endtypeid = _dbManDevWP.ResultsDataTable.Rows[0]["Endtypeid"].ToString();
                }
            }
            

            ///////////////////////////////////////////// RDO/////////////////////////////////////////

            for (int rdo = 11; rdo <= 32; rdo++) ////////////// DayShift
            {
                if ((rdbStoping.Checked == true) || (rdbDev.Checked == true))
                {

                    if (CrewGrid1.Rows[rdo].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[rdo].Cells[1].Value.ToString() != "")
                        {
                            if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[48].Value) > 0)
                            {
                               
                                //TLDS = TLDS + Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[50].Value);

                                /////////////Calc Total Shifts///////////////////
                                CrewGrid1.Rows[12].Cells[0].Style.BackColor = Color.Red;
                                CrewGrid1.Rows[12].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[12].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[48].Value);

                            }
                            else
                            {
                                CrewGrid1.Rows[rdo].Cells[50].Value = "0";
                            }
                        }
                    }
                }

               
              
            }

            
            //////////////////////////////////////////////////////////////////////////////////////////

            //////////////////////////////////2nd RDO

            for (int rdo = 33; rdo <= 64; rdo++) ////////////// DayShift
            {
                if ((rdbStoping.Checked == true) || (rdbDev.Checked == true))
                {

                    if (CrewGrid1.Rows[rdo].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[rdo].Cells[1].Value.ToString() != "")
                        {
                            if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[48].Value) > 0)
                            {

                                

                                /////////////Calc Total Shifts///////////////////
                                CrewGrid1.Rows[34].Cells[0].Style.BackColor = Color.Red;
                                CrewGrid1.Rows[34].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[34].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[48].Value);



                            }
                            else
                            {
                                CrewGrid1.Rows[rdo].Cells[50].Value = "0";
                            }
                        }
                    }
                }

            }

            /////////////////////////////////////////////////////////////////////////////////////////////////////

            ////////////////////////////Calc RDO Hole Incentive ////////////////////////////////////////////////

           // double RDOAwop = 0;

            double MeterPerShift = 0;

           /// double DevRDORate = 0;
           // double DevHolesperMeter = 0;
            string DevCat = "";

            

            

            AvgRDO = (Convert.ToDouble(CrewGrid1.Rows[12].Cells[0].Value) + Convert.ToDouble(CrewGrid1.Rows[34].Cells[0].Value)) / Convert.ToDouble(PosShiftsLbl.Text);

            if (ReefTypelbl.Text == "Mer")
            {
                MeterPerShift = 14;
            }
            else
            {
                MeterPerShift = 16;
            }

            if(rdbDev.Checked == true)
            {

                 if (endtypeid != "")
                  {
                        if ((Convert.ToInt16(endtypeid) <= 2) || (Convert.ToInt16(endtypeid) == 8))
                        {
                            devRDORate = 2;
                            devRDOHolesperMeter = 34.7; 
                            DevCat = "FWD";
                        }

                        if ((Convert.ToInt16(endtypeid) == 3) || (Convert.ToInt16(endtypeid) == 5) || (Convert.ToInt16(endtypeid) == 12))
                        {
                            devRDORate = 2;
                            devRDOHolesperMeter = 17.6;
                            DevCat = "RSE";
                        }


                        if ((Convert.ToInt16(endtypeid) == 4))
                        {
                            devRDORate = 3;
                            devRDOHolesperMeter = 24;
                            DevCat = "BH";
                        }
                 }

                TotalHoleBS = (Convert.ToDouble(TotalWPSqmLbl.Text) * devRDOHolesperMeter * devRDORate);
            }


            for (int rdo = 11; rdo <= 64; rdo++) ////////////// DayShift
            {
                if ((rdbStoping.Checked == true))
                {

                    if (CrewGrid1.Rows[rdo].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[rdo].Cells[1].Value.ToString() != "")
                        {
                            CrewGrid1.Rows[rdo].Cells[51].Value = 0;
                            CrewGrid1.Rows[rdo].Cells[52].Value = 0;
                            CrewGrid1.Rows[rdo].Cells[53].Value = 0;
                            CrewGrid1.Rows[rdo].Cells[54].Value = 0;

                            if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[48].Value) > 0)
                            {

                                CrewGrid1.Rows[rdo].Cells[55].Value = (TotalHoleBS / AvgRDO) * (Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[48].Value) / Convert.ToDouble(PosShiftsLbl.Text));
                                
                                if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[49].Value) == 0) 
                                {
                                    RDOAWOP = 0;
                                }

                                if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[49].Value) >= 1)
                                {
                                    RDOAWOP = Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[49].Value) * Convert.ToDouble(AbscentBonusLbl.Text) / 100;

                                    if ((Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[49].Value) * Convert.ToDouble(AbscentBonusLbl.Text)) > 99)
                                    {
                                        RDOAWOP = 1;
                                    }
                                }

                               


                                CrewGrid1.Rows[rdo].Cells[55].Value = Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value) * RDOLTI;

                                if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[49].Value) > 0)
                                {
                                    CrewGrid1.Rows[rdo].Cells[52].Value = Math.Round(Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value) * RDOAWOP,0);
                                }

                                CrewGrid1.Rows[rdo].Cells[55].Value =  Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value) - (Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value) * RDOAWOP);

                                CrewGrid1.Rows[rdo].Cells[55].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value), 2));

                                DSRDOPay =DSRDOPay +  Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value);
                                

                                if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[49].Value) > 2)
                                {
                                    CrewGrid1.Rows[rdo].Cells[55].Value = "0.00";
                                }


                            }
                            else
                            {
                                
                            }


                            ////////////////////////RDO  Incentive/////////////////////

                            if (ReefTypelbl.Text == "Mer")
                            {
                                MyTarget = Convert.ToDouble(PosShiftsLbl.Text) * 14;
                            }
                            else
                            {
                                MyTarget = Convert.ToDouble(PosShiftsLbl.Text) * 16;
                            }

                            if (Convert.ToDouble(TotalWPSqmLbl.Text) >= MyTarget)
                            {
                                if (CrewGrid1.Rows[rdo].Cells[48].Value != null)
                                {
                                    if (CrewGrid1.Rows[rdo].Cells[48].Value.ToString() != "")
                                    {
                                        CrewGrid1.Rows[rdo].Cells[56].Value = ((Convert.ToDouble(IncentiveSqmLbl.Text) + Convert.ToDouble(IncentiveSweepsLbl.Text)) * 1.6) / Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[48].Value) * RDOLTI;
                                        CrewGrid1.Rows[rdo].Cells[56].Value = Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[56].Value) - (Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[56].Value) * RDOAWOP);
                                        CrewGrid1.Rows[rdo].Cells[56].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[56].Value), 2));
                                    }
                                    else
                                    {
                                        CrewGrid1.Rows[rdo].Cells[56].Value = "0.00";
                                    }
                                }
                                else
                                {
                                    CrewGrid1.Rows[rdo].Cells[56].Value = "0.00";
                                }
                            }
                            else
                            {
                                CrewGrid1.Rows[rdo].Cells[56].Value = "0.00";
                            }


                            CrewGrid1.Rows[rdo].Cells[57].Value = String.Format("{0:0.00}",Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[56].Value) + Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value));
                            DSFinalPay = DSFinalPay + Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[57].Value);

                            //////////////////////////////////////////////////////////////
                        }
                    }
                }

                ////////////////////////////////////////////Dev RDO////////////////////////////////////////////
                if (rdbDev.Checked)
                {
                    if (CrewGrid1.Rows[rdo].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[rdo].Cells[1].Value.ToString() != "")
                        {

                           

                            CrewGrid1.Rows[rdo].Cells[51].Value = 0;
                            CrewGrid1.Rows[rdo].Cells[52].Value = 0;
                            CrewGrid1.Rows[rdo].Cells[53].Value = 0;
                            CrewGrid1.Rows[rdo].Cells[54].Value = 0;

                            if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[48].Value) > 0)
                            {

                                CrewGrid1.Rows[rdo].Cells[55].Value = (TotalHoleBS / AvgRDO) * (Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[48].Value) / Convert.ToDouble(PosShiftsLbl.Text));

                                if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[49].Value) == 0)
                                {
                                    RDOAWOP = 0;
                                }

                                if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[49].Value) >= 1)
                                {
                                    RDOAWOP = Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[49].Value) * Convert.ToDouble(AbscentBonusLbl.Text) / 100;

                                    if ((Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[49].Value) * Convert.ToDouble(AbscentBonusLbl.Text)) > 99)
                                    {
                                        RDOAWOP = 1;
                                    }
                                }




                                CrewGrid1.Rows[rdo].Cells[55].Value = Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value) * RDOLTI;

                                if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[49].Value) > 0)
                                {
                                    CrewGrid1.Rows[rdo].Cells[52].Value = Math.Round(Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value) * RDOAWOP, 0);
                                }

                                CrewGrid1.Rows[rdo].Cells[55].Value = Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value) - (Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value) * RDOAWOP);

                                CrewGrid1.Rows[rdo].Cells[55].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value), 2));

                                DSRDOPay = DSRDOPay + Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value);


                                if (Convert.ToInt32(CrewGrid1.Rows[rdo].Cells[49].Value) > 2)
                                {
                                    CrewGrid1.Rows[rdo].Cells[55].Value = "0.00";
                                }


                            }
                            else
                            {

                            }


                            ////////////////////////RDO  Incentive/////////////////////

                            if (DevCat == "FWD")
                            {
                                MyTarget = Convert.ToDouble(PosShiftsLbl.Text) * 1.7;
                            }
                            else if (DevCat == "RSE")
                            {
                                MyTarget = Convert.ToDouble(PosShiftsLbl.Text) * 1.5;
                            }
                            else if (DevCat == "BH")
                            {
                                MyTarget = Convert.ToDouble(PosShiftsLbl.Text) * 0.8;
                            }

                            if (Convert.ToDouble(TotalWPSqmLbl.Text) >= MyTarget)
                            {
                                if (CrewGrid1.Rows[rdo].Cells[48].Value != null)
                                {
                                    if (CrewGrid1.Rows[rdo].Cells[48].Value.ToString() != "")
                                    {
                                        CrewGrid1.Rows[rdo].Cells[56].Value = (Convert.ToDouble(IncentiveSqmLbl.Text) + Convert.ToDouble(IncentiveSweepsLbl.Text)) * Convert.ToDouble(1.6) ; //(Convert.ToDouble(IncentiveSqmLbl.Text) + Convert.ToDouble(IncentiveSweepsLbl.Text) * 1.6) / Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[48].Value) * RDOLTI;
                                         CrewGrid1.Rows[rdo].Cells[56].Value = Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[56].Value) /  Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[48].Value) * RDOLTI;
                                        CrewGrid1.Rows[rdo].Cells[56].Value = Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[56].Value) - (Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[56].Value) * RDOAWOP);
                                        CrewGrid1.Rows[rdo].Cells[56].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[56].Value), 2));
                                    }
                                    else
                                    {
                                        CrewGrid1.Rows[rdo].Cells[56].Value = "0.00";
                                    }
                                }
                                else
                                {
                                    CrewGrid1.Rows[rdo].Cells[56].Value = "0.00";
                                }
                            }
                            else
                            {
                                CrewGrid1.Rows[rdo].Cells[56].Value = "0.00";
                            }


                            CrewGrid1.Rows[rdo].Cells[57].Value = String.Format("{0:0.00}",Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[56].Value) + Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[55].Value));
                            DSFinalPay = DSFinalPay + Convert.ToDouble(CrewGrid1.Rows[rdo].Cells[57].Value);

                            //////////////////////////////////////////////////////////////
                        }
                    }
                }
                ////////////////////////////////////////////////////////////////////////////////////////////////

               

            }

            /////////////////////////////////////////////////////////////////////////////////////////////////

           

            for (int os = 65; os <= 95; os++) //////////////////////Other Stoping D/S
            {
                if ((rdbStoping.Checked == true) || (rdbRCrew.Checked == true) || (rdbZCrew.Checked == true) || (rdbDev.Checked == true))//|| (rdbDevTransCrew.Checked == true)
                {

                    if (CrewGrid1.Rows[os].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[os].Cells[1].Value.ToString() != "")
                        {
                            CrewGrid1.Rows[os].Cells[51].Value = 0;
                            CrewGrid1.Rows[os].Cells[52].Value = 0;
                            CrewGrid1.Rows[os].Cells[53].Value = 0;
                            CrewGrid1.Rows[os].Cells[54].Value = 0;

                            if (Convert.ToInt32(CrewGrid1.Rows[os].Cells[48].Value) > 0)
                            {
                                CrewGrid1.Rows[os].Cells[50].Value = (Convert.ToDouble(IncentiveSqmLbl.Text) + Convert.ToDouble(IncentiveSweepsLbl.Text)) / Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[os].Cells[48].Value);
                                CrewGrid1.Rows[os].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value), 2));
                                OSDS = OSDS + Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value);

                                CrewGrid1.Rows[66].Cells[0].Style.BackColor = Color.Red;
                                CrewGrid1.Rows[66].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[66].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[os].Cells[48].Value);

                            }
                            else
                            {
                                CrewGrid1.Rows[os].Cells[50].Value = "0";
                            }
                        }
                    }
                }
                else
                {
                    if (Convert.ToDouble(CrewGrid1.Rows[os].Cells[48].Value) > 0)
                    {
                        if (Convert.ToInt32(AvgEmpLbl.Text) <= Comp)
                        {
                            CrewGrid1.Rows[os].Cells[50].Value = (Convert.ToDouble(IncentiveSqmLbl.Text) / Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[os].Cells[48].Value));
                            CrewGrid1.Rows[os].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value)+0.001, 2));
                            OSDS = OSDS + Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value);

                            CrewGrid1.Rows[66].Cells[0].Style.BackColor = Color.Red;
                            CrewGrid1.Rows[66].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[66].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[os].Cells[48].Value);

                        }
                        else
                        {
                            CrewGrid1.Rows[os].Cells[50].Value = ((Convert.ToDouble(IncentiveSqmLbl.Text) / Convert.ToDouble(AvgEmpLbl.Text)) * Comp) * (Convert.ToDouble(CrewGrid1.Rows[os].Cells[48].Value) / Convert.ToDouble(PosShiftsLbl.Text));
                            CrewGrid1.Rows[os].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value) + 0.001, 2));
                            OSDS = OSDS + Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value);

                            CrewGrid1.Rows[66].Cells[0].Style.BackColor = Color.Red;
                            CrewGrid1.Rows[66].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[66].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[os].Cells[48].Value);
                        }
                    }
                    else
                    {
                        CrewGrid1.Rows[os].Cells[50].Value = String.Format("{0:0.00}",0.00 );
                    }
                }


                //////////// Attendance Deduction////////////
                if (Convert.ToInt32(CrewGrid1.Rows[os].Cells[49].Value) != 0)
                {
                    if ((Convert.ToDouble(AbscentBonusLbl.Text) * Convert.ToInt32(CrewGrid1.Rows[os].Cells[49].Value)) > 99)
                    {
                        CrewGrid1.Rows[os].Cells[52].Value = CrewGrid1.Rows[os].Cells[50].Value;
                        CrewGrid1.Rows[os].Cells[52].Value =Convert.ToDouble(CrewGrid1.Rows[os].Cells[52].Value);
                    }
                    else
                    {
                        CrewGrid1.Rows[os].Cells[52].Value = Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value) * Convert.ToDouble(CrewGrid1.Rows[os].Cells[49].Value) * Convert.ToDouble(AbscentBonusLbl.Text) / 100;
                        CrewGrid1.Rows[os].Cells[52].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[52].Value), 0));
                    }
                }
                /////////////////////////////////////////////

                ////////////////Safety Deduction////////////////////////////////////////////

                if (DSRifactor != 0)
                {
                    CrewGrid1.Rows[os].Cells[51].Value = CrewGrid1.Rows[os].Cells[49].Value;
                }
                else
                {
                    if (Convert.ToInt32(DSLtiSafeLbl.Text) > 3)
                    {
                        CrewGrid1.Rows[os].Cells[51].Value = CrewGrid1.Rows[os].Cells[49].Value;
                    }
                    else
                    {
                        CrewGrid1.Rows[os].Cells[51].Value = 0;
                    }
                }

                if (DSFatalfactor != 0)
                {
                    CrewGrid1.Rows[os].Cells[51].Value = CrewGrid1.Rows[os].Cells[49].Value;
                }
                else
                {
                    CrewGrid1.Rows[os].Cells[51].Value = "0";
                }

                ///////////////////////////////////////////////////////////////////////////

                if ((Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[53].Value)) * DSltifactor + Convert.ToDouble(CrewGrid1.Rows[os].Cells[54].Value) > 0)
                {
                    if ((rdbStoping.Checked == true) || (rdbRCrew.Checked == true) || (rdbXCCrew.Checked == true) || (rdbConstCrew.Checked == true) || (rdbDev.Checked == true) || (rdbDevRailCrew.Checked == true) || (rdbDevTransCrew.Checked == true) || (rdbDevCleanCrew.Checked == true) || (rdbDevConCrew.Checked == true))
                    {
                        CrewGrid1.Rows[os].Cells[57].Value = (Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[53].Value)) * DSltifactor + Convert.ToDouble(CrewGrid1.Rows[os].Cells[54].Value);
                        CrewGrid1.Rows[os].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value), 2));
                        DSFinalPay = DSFinalPay + Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value);
                    }
                    else
                    {
                        CrewGrid1.Rows[os].Cells[57].Value = (Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[53].Value)) + Convert.ToDouble(CrewGrid1.Rows[os].Cells[54].Value);
                        CrewGrid1.Rows[os].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value), 2));
                        DSFinalPay = DSFinalPay + Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value);
                    }
                }
                else
                {
                    CrewGrid1.Rows[os].Cells[57].Value = 0;
                }


                //////////////////////Final Safety Calc////////////////////

                if ((Convert.ToInt32(DSRiLbl.Text) + Convert.ToInt32(DSLtiSafeLbl.Text) + Convert.ToInt32(DSFatalLbl.Text)) > 0)
                {
                    if (CrewGrid1.Rows[os].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[os].Cells[1].Value.ToString() != "")
                        {
                            CrewGrid1.Rows[os].Cells[51].Value = Math.Round(DSRifactor + DSltifactor * 100,0);

                            if (Convert.ToDouble(CrewGrid1.Rows[os].Cells[51].Value) > 99)
                            {
                                CrewGrid1.Rows[os].Cells[51].Value = 100;
                            }

                            CrewGrid1.Rows[os].Cells[53].Value = Math.Round(DSFatalfactor,0);

                            if (Convert.ToDouble(CrewGrid1.Rows[os].Cells[53].Value) > 0)
                            {
                                CrewGrid1.Rows[os].Cells[53].Value = 100;
                            }


                            CrewGrid1.Rows[os].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value) - (Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value) * (Convert.ToDouble(CrewGrid1.Rows[os].Cells[53].Value) + Convert.ToDouble(CrewGrid1.Rows[os].Cells[51].Value)) / 100),2));
                            DSFinalPay = DSFinalPay + Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value);
                            if (Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value) < 0)
                            {
                               CrewGrid1.Rows[os].Cells[57].Value = "0.00";
                            }
                        }
                    }
                }

                ////////////////////////////////////////////////////////////


            }

            CalcShifts = 0;

                for (int t = 99; t <= 109; t++) ////////////// Night Shift TL
                {
                    if ((rdbStoping.Checked == true) || (rdbRCrew.Checked == true) || (rdbZCrew.Checked == true) || (rdbDev.Checked == true))
                    {

                        if (CrewGrid1.Rows[t].Cells[1].Value != null)
                        {
                            if (CrewGrid1.Rows[t].Cells[1].Value.ToString() != "")
                            {
                                CrewGrid1.Rows[t].Cells[51].Value = 0;
                                CrewGrid1.Rows[t].Cells[52].Value = 0;
                                CrewGrid1.Rows[t].Cells[53].Value = 0;
                                CrewGrid1.Rows[t].Cells[54].Value = 0;

                                if (Convert.ToInt32(CrewGrid1.Rows[t].Cells[48].Value) > 0)
                                {
                                    CrewGrid1.Rows[t].Cells[50].Value = (Convert.ToDouble(IncentiveSqmLbl.Text) + Convert.ToDouble(IncentiveSweepsLbl.Text)) / Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[t].Cells[48].Value) * Convert.ToDouble(TeamLeaderBonusLbl.Text);
                                    CrewGrid1.Rows[t].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value), 2));
                                    TLNS = TLNS + Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value);

                                    CrewGrid1.Rows[100].Cells[0].Style.BackColor = Color.Red;
                                    CrewGrid1.Rows[100].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[100].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[t].Cells[48].Value);
                                }
                                else
                                {
                                    CrewGrid1.Rows[t].Cells[50].Value = "0";
                                }
                            }
                        }
                    }
                    else
                    {
                        if (Convert.ToInt32(AvgEmpLbl.Text) <= Comp)
                        {
                            CrewGrid1.Rows[t].Cells[50].Value = (Convert.ToDouble(IncentiveSqmLbl.Text) * 2 * (Convert.ToDouble(CrewGrid1.Rows[t].Cells[48].Value) / Convert.ToDouble(PosShiftsLbl.Text)));
                            TLNS = TLNS + Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value);

                            CrewGrid1.Rows[100].Cells[0].Style.BackColor = Color.Red;
                            CrewGrid1.Rows[100].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[100].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[t].Cells[48].Value);
                        }
                        else
                        {
                            CrewGrid1.Rows[t].Cells[50].Value = ((Convert.ToDouble(IncentiveSqmLbl.Text) / Convert.ToDouble(AvgEmpLbl.Text)) * Comp) * 2 * (Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[t].Cells[48].Value));
                            CrewGrid1.Rows[t].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value), 2));
                            TLNS = TLNS + Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value);

                            CrewGrid1.Rows[100].Cells[0].Style.BackColor = Color.Red;
                            CrewGrid1.Rows[100].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[100].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[t].Cells[48].Value);
                        }
                    }

                    //////////// Attendance Deduction////////////
                    if (Convert.ToInt32(CrewGrid1.Rows[t].Cells[49].Value) != 0)
                    {
                        if ((Convert.ToDouble(AbscentBonusLbl.Text) * Convert.ToInt32(CrewGrid1.Rows[t].Cells[49].Value)) > 99)
                        {
                            CrewGrid1.Rows[t].Cells[52].Value = CrewGrid1.Rows[t].Cells[50].Value;
                            CrewGrid1.Rows[t].Cells[52].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[52].Value), 0));
                        }
                        else
                        {
                            CrewGrid1.Rows[t].Cells[52].Value = Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value) * Convert.ToDouble(CrewGrid1.Rows[t].Cells[49].Value) * Convert.ToDouble(AbscentBonusLbl.Text) / 100;
                            CrewGrid1.Rows[t].Cells[52].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[52].Value), 0));
                        }
                    }
                    /////////////////////////////////////////////

                    ////////////////Safety Deduction////////////////////////////////////////////

                    if (NSRifactor != 0)
                    {
                        CrewGrid1.Rows[t].Cells[51].Value = CrewGrid1.Rows[t].Cells[49].Value;
                    }
                    else
                    {
                        if (Convert.ToInt32(NSLtiSafeLbl.Text) > 3)
                        {
                            CrewGrid1.Rows[t].Cells[51].Value = CrewGrid1.Rows[t].Cells[49].Value;
                        }
                        else
                        {
                            CrewGrid1.Rows[t].Cells[51].Value = 0;
                        }
                    }

                    if (NSFatalfactor != 0)
                    {
                        CrewGrid1.Rows[t].Cells[51].Value = CrewGrid1.Rows[t].Cells[49].Value;
                    }
                    else
                    {
                        CrewGrid1.Rows[t].Cells[51].Value = "0";
                    }

                    ///////////////////////////////////////////////////////////////////////////


               if ((Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[53].Value)) * NSltifactor + Convert.ToDouble(CrewGrid1.Rows[t].Cells[54].Value) > 0)
                {
                    if ((rdbStoping.Checked == true) || (rdbRCrew.Checked == true) || (rdbXCCrew.Checked == true) || (rdbConstCrew.Checked == true) || (rdbDev.Checked == true))
                    {
                        CrewGrid1.Rows[t].Cells[57].Value = (Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[53].Value)) * NSltifactor + Convert.ToDouble(CrewGrid1.Rows[t].Cells[54].Value);
                        CrewGrid1.Rows[t].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value), 2));
                        NSFinalPay = NSFinalPay + Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value);
                    }
                    else
                    {
                        CrewGrid1.Rows[t].Cells[57].Value = (Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[t].Cells[53].Value)) + Convert.ToDouble(CrewGrid1.Rows[t].Cells[54].Value);
                        CrewGrid1.Rows[t].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value), 2));
                        NSFinalPay = NSFinalPay + Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value);
                    }
                }
                else
                {
                    CrewGrid1.Rows[t].Cells[57].Value = 0;
                }


                //////////////////////Final Safety Calc////////////////////

               if ((Convert.ToInt32(NSRiLbl.Text) + Convert.ToInt32(NSLtiSafeLbl.Text) + Convert.ToInt32(NSFatalLbl.Text)) > 0)
                {
                    if (CrewGrid1.Rows[t].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[t].Cells[1].Value.ToString() != "")
                        {
                            CrewGrid1.Rows[t].Cells[51].Value = Math.Round(NSRifactor + NSltifactor * 100,0);

                            if (Convert.ToDouble(CrewGrid1.Rows[t].Cells[51].Value) > 99)
                            {
                                CrewGrid1.Rows[t].Cells[51].Value = 100;
                            }

                            CrewGrid1.Rows[t].Cells[53].Value = Math.Round(NSFatalfactor,0);

                            if (Convert.ToDouble(CrewGrid1.Rows[t].Cells[53].Value) > 0)
                            {
                                CrewGrid1.Rows[t].Cells[53].Value = 100;
                            }


                            CrewGrid1.Rows[t].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value) - (Convert.ToDouble(CrewGrid1.Rows[t].Cells[50].Value) * (Convert.ToDouble(CrewGrid1.Rows[t].Cells[53].Value) + Convert.ToDouble(CrewGrid1.Rows[t].Cells[51].Value)) / 100),2));
                           // NSFinalPay = NSFinalPay + Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value);
                            if (Convert.ToDouble(CrewGrid1.Rows[t].Cells[57].Value) < 0)
                            {
                                CrewGrid1.Rows[t].Cells[57].Value = "0.00";
                            }
                        }
                    }
                }

                ////////////////////////////////////////////////////////////


                }

                CalcShifts = 0;

                for (int os = 111; os <= 141; os++) //////////////////////Other Stoping N/S
                {
                    if ((rdbStoping.Checked == true) || (rdbRCrew.Checked == true) || (rdbZCrew.Checked == true) || (rdbDev.Checked == true))
                    {

                        if (CrewGrid1.Rows[os].Cells[1].Value != null)
                        {
                            if (CrewGrid1.Rows[os].Cells[1].Value.ToString() != "")
                            {

                                CrewGrid1.Rows[os].Cells[51].Value = 0;
                                CrewGrid1.Rows[os].Cells[52].Value = 0;
                                CrewGrid1.Rows[os].Cells[53].Value = 0;
                                CrewGrid1.Rows[os].Cells[54].Value = 0;

                                if (Convert.ToInt32(CrewGrid1.Rows[os].Cells[48].Value) > 0)
                                {
                                    if (rdbDev.Checked == true)
                                    {
                                        if (CrewGrid1.Rows[os].Cells[58].Value != null)
                                        {
                                            if (CrewGrid1.Rows[os].Cells[58].Value.ToString() == "Loader Driver")
                                            {
                                                CrewGrid1.Rows[os].Cells[50].Value = (Convert.ToDouble(IncentiveSqmLbl.Text) + Convert.ToDouble(IncentiveSweepsLbl.Text)) / Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[os].Cells[48].Value) * Convert.ToDouble(TeamLeaderBonusLbl.Text);
                                                CrewGrid1.Rows[os].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value), 2));
                                            }
                                            else
                                            {
                                                CrewGrid1.Rows[os].Cells[50].Value = (Convert.ToDouble(IncentiveSqmLbl.Text) + Convert.ToDouble(IncentiveSweepsLbl.Text)) / Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[os].Cells[48].Value);
                                                CrewGrid1.Rows[os].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value), 2));
                                            }
                                        }
                                        else
                                        {
                                            CrewGrid1.Rows[os].Cells[50].Value = (Convert.ToDouble(IncentiveSqmLbl.Text) + Convert.ToDouble(IncentiveSweepsLbl.Text)) / Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[os].Cells[48].Value);
                                            CrewGrid1.Rows[os].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value), 2));
                                        }

                                    }
                                    else
                                    {
                                        CrewGrid1.Rows[os].Cells[50].Value = (Convert.ToDouble(IncentiveSqmLbl.Text) + Convert.ToDouble(IncentiveSweepsLbl.Text)) / Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[os].Cells[48].Value);
                                        CrewGrid1.Rows[os].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value), 2));
                                    }
                                    OSNS = OSNS + Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value);

                                    CrewGrid1.Rows[112].Cells[0].Style.BackColor = Color.Red;
                                    CrewGrid1.Rows[112].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[112].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[os].Cells[48].Value);
                                }
                                else
                                {
                                    CrewGrid1.Rows[os].Cells[50].Value = "0";
                                }
                            }
                        }
                    }
                    else
                    {
                        if (Convert.ToInt32(AvgEmpLbl.Text) <= Comp)
                        {
                            CrewGrid1.Rows[os].Cells[50].Value = (Convert.ToDouble(IncentiveSqmLbl.Text) / Convert.ToDouble(PosShiftsLbl.Text) * Convert.ToDouble(CrewGrid1.Rows[os].Cells[48].Value));
                            CrewGrid1.Rows[os].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value), 2));
                            OSNS = OSNS + Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value);

                            CrewGrid1.Rows[112].Cells[0].Style.BackColor = Color.Red;
                            CrewGrid1.Rows[112].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[112].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[os].Cells[48].Value);
                        }
                        else
                        {
                            CrewGrid1.Rows[os].Cells[50].Value = ((Convert.ToDouble(IncentiveSqmLbl.Text) / Convert.ToDouble(AvgEmpLbl.Text)) * Comp) * (Convert.ToDouble(CrewGrid1.Rows[os].Cells[48].Value) / Convert.ToDouble(PosShiftsLbl.Text));
                            CrewGrid1.Rows[os].Cells[50].Value = String.Format("{0:0.00}", Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value), 2));
                            OSNS = OSNS + Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value);

                            CrewGrid1.Rows[112].Cells[0].Style.BackColor = Color.Red;
                            CrewGrid1.Rows[112].Cells[0].Value = Convert.ToInt32(CrewGrid1.Rows[112].Cells[0].Value) + Convert.ToInt32(CrewGrid1.Rows[os].Cells[48].Value);
                        }
                    }


                    //////////// Attendance Deduction////////////
                    if (Convert.ToInt32(CrewGrid1.Rows[os].Cells[49].Value) != 0)
                    {
                        if ((Convert.ToDouble(AbscentBonusLbl.Text) * Convert.ToInt32(CrewGrid1.Rows[os].Cells[49].Value)) > 99)
                        {
                            CrewGrid1.Rows[os].Cells[52].Value = CrewGrid1.Rows[os].Cells[50].Value;
                            CrewGrid1.Rows[os].Cells[52].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[52].Value), 0));
                        }
                        else
                        {
                            CrewGrid1.Rows[os].Cells[52].Value = Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value) * Convert.ToDouble(CrewGrid1.Rows[os].Cells[49].Value) * Convert.ToDouble(AbscentBonusLbl.Text) / 100;
                            CrewGrid1.Rows[os].Cells[52].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[52].Value), 0));
                        }
                    }
                    /////////////////////////////////////////////

                    ////////////////Safety Deduction////////////////////////////////////////////

                    if (NSRifactor != 0)
                    {
                        CrewGrid1.Rows[os].Cells[51].Value = CrewGrid1.Rows[os].Cells[49].Value;
                    }
                    else
                    {
                        if (Convert.ToInt32(DSLtiSafeLbl.Text) > 3)
                        {
                            CrewGrid1.Rows[os].Cells[51].Value = CrewGrid1.Rows[os].Cells[49].Value;
                        }
                        else
                        {
                            CrewGrid1.Rows[os].Cells[51].Value = 0;
                        }
                    }

                    if (NSFatalfactor != 0)
                    {
                        CrewGrid1.Rows[os].Cells[51].Value = CrewGrid1.Rows[os].Cells[49].Value;
                    }
                    else
                    {
                        CrewGrid1.Rows[os].Cells[51].Value = "0";
                    }

                    ///////////////////////////////////////////////////////////////////////////

               if ((Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[53].Value)) * NSltifactor + Convert.ToDouble(CrewGrid1.Rows[os].Cells[54].Value) > 0)
                {
                    if ((rdbStoping.Checked == true) || (rdbRCrew.Checked == true) || (rdbXCCrew.Checked == true) || (rdbConstCrew.Checked == true) || (rdbDev.Checked == true))
                    {
                        CrewGrid1.Rows[os].Cells[57].Value = (Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[53].Value)) * NSltifactor + Convert.ToDouble(CrewGrid1.Rows[os].Cells[54].Value);
                        CrewGrid1.Rows[os].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value), 2));
                        NSFinalPay = NSFinalPay + Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value);
                    }
                    else
                    {
                        CrewGrid1.Rows[os].Cells[57].Value = (Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[51].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[52].Value) - Convert.ToDouble(CrewGrid1.Rows[os].Cells[53].Value)) + Convert.ToDouble(CrewGrid1.Rows[os].Cells[54].Value);
                        CrewGrid1.Rows[os].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value), 2));
                        NSFinalPay = NSFinalPay + Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value);
                    }
                }
                else
                {
                    CrewGrid1.Rows[os].Cells[57].Value = 0;
                }


                //////////////////////Final Safety Calc////////////////////

               if ((Convert.ToInt32(NSRiLbl.Text) + Convert.ToInt32(NSLtiSafeLbl.Text) + Convert.ToInt32(NSFatalLbl.Text)) > 0)
                {
                    if (CrewGrid1.Rows[os].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[os].Cells[1].Value.ToString() != "")
                        {
                            CrewGrid1.Rows[os].Cells[51].Value = Math.Round(NSRifactor + NSltifactor * 100,0);

                            if (Convert.ToDouble(CrewGrid1.Rows[os].Cells[51].Value) > 99)
                            {
                                CrewGrid1.Rows[os].Cells[51].Value = 100;
                            }

                            CrewGrid1.Rows[os].Cells[53].Value = Math.Round(NSFatalfactor,0);

                            if (Convert.ToDouble(CrewGrid1.Rows[os].Cells[53].Value) > 0)
                            {
                                CrewGrid1.Rows[os].Cells[53].Value = 100;
                            }


                            CrewGrid1.Rows[os].Cells[57].Value = String.Format("{0:0.00}",Math.Round(Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value) - (Convert.ToDouble(CrewGrid1.Rows[os].Cells[50].Value) * (Convert.ToDouble(CrewGrid1.Rows[os].Cells[53].Value) + Convert.ToDouble(CrewGrid1.Rows[os].Cells[51].Value)) / 100),2));
                            //NSFinalPay = NSFinalPay + Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value);
                            if (Convert.ToDouble(CrewGrid1.Rows[os].Cells[57].Value) < 0)
                            {
                                CrewGrid1.Rows[os].Cells[57].Value = "0.00";
                            }
                        }
                    }
                }

                ////////////////////////////////////////////////////////////


                }


               

               

                CrewGrid1.Rows[97].Cells[50].Value =TLDS + OSDS;
               CrewGrid1.Rows[143].Cells[50].Value = TLNS + OSNS;

               CrewGrid1.Rows[144].Cells[50].Value = TLDS + OSDS + TLNS + OSNS;

               CrewGrid1.Rows[97].Cells[55].Value = String.Format("{0:0.00}",DSRDOPay);
               CrewGrid1.Rows[144].Cells[55].Value = String.Format("{0:0.00}",DSRDOPay);

               CrewGrid1.Rows[97].Cells[57].Value = String.Format("{0:0.00}", DSFinalPay); ;
               CrewGrid1.Rows[143].Cells[57].Value = String.Format("{0:0.00}",NSFinalPay);
               CrewGrid1.Rows[144].Cells[57].Value = String.Format("{0:0.00}",DSFinalPay + NSFinalPay);

               

               DataTable CrewHeading = new DataTable();

               CrewHeading.Rows.Add();

               for (int i = 0; i <= 45; i++)
               {
                   if (StartDate.Value.AddDays(i) <= EndDate.Value)
                   {
                       CrewHeading.Columns.Add();
                       CrewHeading.Rows[0][i] = StartDate.Value.AddDays(i).ToString("dd MMM ddd");
                   }
                   else
                   {
                       CrewHeading.Columns.Add();
                       CrewHeading.Rows[0][i] = "";
                   }
               }

               CrewHeading.TableName = "CalDates";
               DataSet DsCalDate = new DataSet();
               DsCalDate.Tables.Add(CrewHeading);

               report.RegisterData(DsCalDate);

               DataTable CrewData = new DataTable();

               DataTable WPData = new DataTable();

               DataTable ReportData = new DataTable();

               DataTable CrewCalcData = new DataTable();

               int count = 0;
               int Row = 0; ;
               int Row2 = 0; ;


               ReportData.Columns.Add();
               ReportData.Rows.Add();

               ReportData.Rows[0][0] = PosShiftsLbl.Text;

               ReportData.Columns.Add();
               ReportData.Rows[0][1] = AvgEmpLbl.Text;

               ReportData.Columns.Add();
               ReportData.Rows[0][2] = IncentiveSqmLbl.Text;

               ReportData.Columns.Add();
               ReportData.Rows[0][3] = IncentiveSweepsLbl.Text;

               ReportData.Columns.Add();
               ReportData.Rows[0][4] = DSltifactor.ToString();

               ReportData.Columns.Add();
               ReportData.Rows[0][5] = NSltifactor.ToString();

               ReportData.Columns.Add();
               ReportData.Rows[0][6] = WaterEndApplied.ToString();

               ReportData.Columns.Add();
               ReportData.Rows[0][7] = WaterEndFactor.ToString();

               ReportData.Columns.Add();
               ReportData.Rows[0][8] = WaterEndMeters.ToString();

               ReportData.Columns.Add(); ///////////////RDO Hole Bonus///////////
               ReportData.Rows[0][9] = "A = (B*C) *D";

               ReportData.Columns.Add(); ///////////////RDO Hole Bonus///////////
               ReportData.Rows[0][10] = "A = (" + TotalWPSqmLbl.Text + "* " + "7)*1" ;

               ReportData.Columns.Add(); ///////////////RDO Hole Bonus///////////
               ReportData.Rows[0][11] = "A = " + TotalHoleBS;

               ReportData.Columns.Add(); ///////////////Monthly Target///////////
               ReportData.Rows[0][12] = "T = H * K";

               ReportData.Columns.Add(); ///////////////Monthly Target///////////
               ReportData.Rows[0][13] = "T = " + PosShiftsLbl.Text + "* " + MeterPerShift  ;

               ReportData.Columns.Add(); ///////////////Monthly Target///////////
               ReportData.Rows[0][14] = "T = " + MyTarget;

               if ((rdbStoping.Checked == true) || (rdbXCCrew.Checked == true) || (rdbZCrew.Checked == true) || (rdbConstCrew.Checked == true) || (rdbRCrew.Checked == true))
               {

                   ReportData.Columns.Add(); ///////////////Holes per M///////////
                   ReportData.Rows[0][15] = stpRDOHolesperMeter;

                   ReportData.Columns.Add(); ///////////////Rate per Hole///////////
                   ReportData.Rows[0][16] = 1;
               }
               else
               {
                   ReportData.Columns.Add(); ///////////////Holes per M///////////
                   ReportData.Rows[0][15] = devRDOHolesperMeter ;

                   ReportData.Columns.Add(); ///////////////Rate per Hole///////////
                   ReportData.Rows[0][16] = devRDORate;
               }

               ReportData.Columns.Add(); ///////////////M per shift///////////
               ReportData.Rows[0][17] = MeterPerShift;

               ReportData.Columns.Add(); ///////////////M per shift///////////
               ReportData.Rows[0][18] = Math.Round(AvgRDO,2);

               ReportData.Columns.Add(); ///////////////Total Sqm///////////
               ReportData.Rows[0][19] = Math.Round(Convert.ToDouble(TotalWPSqmLbl.Text), 2);

               ReportData.Columns.Add(); ///////////////Total Sqm///////////
               ReportData.Rows[0][20] = Math.Round(Convert.ToDouble(waste), 2);

               ReportData.Columns.Add(); ///////////////Total Sqm///////////
               ReportData.Rows[0][21] = Math.Round(Convert.ToDouble(sweeps), 2);

               if (rdbStoping.Checked)
               {
                   ReportData.Columns.Add();
                   ReportData.Rows[0][22] = "Crew Bonus Report:" + rdbStoping.Text;
               }
               if (rdbRCrew.Checked)
               {
                   ReportData.Columns.Add();
                   ReportData.Rows[0][22] = "Crew Bonus Report:" + rdbRCrew.Text;
               }
               if (rdbZCrew.Checked)
               {
                   ReportData.Columns.Add();
                   ReportData.Rows[0][22] = "Crew Bonus Report:" + rdbZCrew.Text;
               }
               if (rdbXCCrew.Checked)
               {
                   ReportData.Columns.Add();
                   ReportData.Rows[0][22] = "Crew Bonus Report:" + rdbXCCrew.Text;
               }
               if (rdbConstCrew.Checked)
               {
                   ReportData.Columns.Add();
                   ReportData.Rows[0][22] = "Crew Bonus Report:" + rdbConstCrew.Text;
               }

               if (rdbDev.Checked)
               {
                   ReportData.Columns.Add();
                   ReportData.Rows[0][22] = "Crew Bonus Report:" + rdbDev.Text;
               }
               if (rdbDevConCrew.Checked)
               {
                   ReportData.Columns.Add();
                   ReportData.Rows[0][22] = "Crew Bonus Report:" + rdbDevConCrew.Text;
               }

               if (rdbDevCleanCrew.Checked)
               {
                   ReportData.Columns.Add();
                   ReportData.Rows[0][22] = "Crew Bonus Report:" + rdbDevCleanCrew.Text;
               }
               if (rdbDevRailCrew.Checked)
               {
                   ReportData.Columns.Add();
                   ReportData.Rows[0][22] = "Crew Bonus Report:" + rdbDevRailCrew.Text;
               }
               if (rdbDevTransCrew.Checked)
               {
                   ReportData.Columns.Add();
                   ReportData.Rows[0][22] = "Crew Bonus Report:" + rdbDevTransCrew.Text;
               }

             
                   ReportData.Columns.Add();
                   ReportData.Rows[0][23] = "ProdMonth: " + ProdMonthTxt.Value;

                   ReportData.Columns.Add();
                   ReportData.Rows[0][24] = "Section : DS Crew " + DsLbl.Text + "  NS Crew " + NSLbl.Text ;
            
           
                






               WPData.Columns.Add();
               WPData.Columns.Add();
               WPData.Columns.Add();
               WPData.Columns.Add();
               int WPRow = 0;

               for (int wp = 0; wp < WPGrid.Rows.Count; wp++)
               {
               
                   if(WPGrid.Rows[wp].Cells[0].Value != null)
                   {
                       if (WPGrid.Rows[wp].Cells[0].Value.ToString() != "")
                       {
                           WPData.Rows.Add();

                           WPData.Rows[WPRow][0] = WPGrid.Rows[wp].Cells[0].Value;
                           WPData.Rows[WPRow][1] = WPGrid.Rows[wp].Cells[1].Value;
                           WPData.Rows[WPRow][2] = WPGrid.Rows[wp].Cells[2].Value;
                           WPData.Rows[WPRow][3] = WPGrid.Rows[wp].Cells[3].Value;

                           WPRow = WPRow + 1;
                       }
                   }
               }
            {
            	
            }

               for (int i = 0; i <= CrewGrid1.Rows.Count -1; i++)
               {

                   if (CrewGrid1.Rows[i].Cells[0].Value != null)
                   {
                       if (CrewGrid1.Rows[i].Cells[0].Value.ToString() != "")
                       {
                           if (CrewGrid1.Rows[i].Cells[59].Value != null)
                           {
                               if (CrewGrid1.Rows[i].Cells[59].Value.ToString() == "Y")
                               {
                                   CrewData.Rows.Add();

                                   for (int col = 0; col < CrewGrid1.Columns.Count; col++)
                                   {
                                       if (count == 0)
                                       {
                                           CrewData.Columns.Add();
                                       }

                                       CrewData.Rows[Row][col] = CrewGrid1.Rows[i].Cells[col].Value;

                                   }
                                   count = 1;

                                   Row = Row + 1;
                               }
                           }
                       }
                   }
                   else
                   {

                       if (CrewGrid1.Rows[i].Cells[1].Value != null)
                       {
                           if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                           {
                               if (CrewGrid1.Rows[i].Cells[59].Value != null)
                               {
                                   if (CrewGrid1.Rows[i].Cells[59].Value.ToString() == "Y")
                                   {
                                       CrewData.Rows.Add();

                                       for (int col = 0; col < CrewGrid1.Columns.Count; col++)
                                       {
                                           //if (count == 0)
                                           //{
                                           //    CrewData.Columns.Add();
                                           //}

                                           CrewData.Rows[Row][col] = CrewGrid1.Rows[i].Cells[col].Value;

                                       }
                                       count = 1;

                                       Row = Row + 1;
                                   }
                               }


                           }


                       }
                   }
                   
               }


            ////////////////////////////////////////CrewData Calcs////////////////////////////////////////////////

            for (int Col = 0; Col <= 22; Col++)
            {
                CrewCalcData.Columns.Add();
            }



            for (int i = 0; i <= CrewGrid1.Rows.Count -1; i++)
            {
                if (CrewGrid1.Rows[i].Cells[0].Value != null)
                {
                    if (CrewGrid1.Rows[i].Cells[0].Value.ToString() != "")
                    {
                        if (CrewGrid1.Rows[i].Cells[59].Value != null)
                        {
                            if (CrewGrid1.Rows[i].Cells[59].Value.ToString() == "Y")
                            {
                                CrewCalcData.Rows.Add();

                                CrewCalcData.Rows[Row2][0] = CrewGrid1.Rows[i].Cells[0].Value;
                                CrewCalcData.Rows[Row2][1] = CrewGrid1.Rows[i].Cells[1].Value;
                                CrewCalcData.Rows[Row2][2] = CrewGrid1.Rows[i].Cells[48].Value;
                                CrewCalcData.Rows[Row2][3] = CrewGrid1.Rows[i].Cells[49].Value;

                                if (i >= 0 && i <= 10)
                                {
                                    if (CrewGrid1.Rows[i].Cells[1].Value !=  null)
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                        {
                                            if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                {
                                                    if ((rdbStoping.Checked == true) || (rdbRCrew.Checked == true) || (rdbZCrew.Checked == true) || (rdbDev.Checked == true))
                                                    {
                                                        CrewCalcData.Rows[Row2][4] = "(I+J)/H*G*" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString();  ///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][5] = "(" + TotalWPSqmLbl.Text.ToString() + "+" + TotalSweepsLbl.Text + ") /" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value.ToString() + "*" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString();///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                    }
                                                    else
                                                    {
                                                        if (Convert.ToInt32(AvgEmpLbl.Text) <= Comp)
                                                        {
                                                            
                                                            CrewCalcData.Rows[Row2][4] = "(I*2*G/H)";  ///////////Pro Rata Incentive
                                                            CrewCalcData.Rows[Row2][5] = IncentiveSqmLbl.Text + "*2*" + CrewGrid1.Rows[i].Cells[48].Value + "/" + PosShiftsLbl.Text;
                                                            CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                        }
                                                        else
                                                        {
                                                            
                                                            CrewCalcData.Rows[Row2][4] = "(I/Avg Emp)*Comp)*2*(G/H)";  ///////////Pro Rata Incentive
                                                            CrewCalcData.Rows[Row2][5] = "(" + IncentiveSqmLbl.Text + "/" + AvgEmpLbl.Text + ")*" + Comp + "*2*(" + CrewGrid1.Rows[i].Cells[48].Value + "/" + PosShiftsLbl.Text  ;
                                                            CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                        }
                                                    }
                                                }
                                            }


                                       

                                       //////////////Absent///////////////////////
                                           
                                            if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][10] = "U*X*" +  Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][11] = CrewGrid1.Rows[i].Cells[50].Value.ToString() + "*" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                }
                                            }
                                      ///////////////////////////////////////////

                                     //////////////Final Calc///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][18] = "(U-V-W)*Q" ;
                                                    CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();
                                                    
                                                }
                                            }
                                            ///////////////////////////////////////////
                                        }
                                    }
                                }

                                if (i >= 99 && i <= 110) ///////////////// TL NightShift
                                {
                                    if (CrewGrid1.Rows[i].Cells[1].Value != null)
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                        {
                                            if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][4] = "(I+J)/H*G*+" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString(); //"Team Leader";///////////Pro Rata Incentive
                                                    CrewCalcData.Rows[Row2][5] = "(" + TotalWPSqmLbl.Text.ToString() + "+" + TotalSweepsLbl.Text + ") /" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value.ToString() + "*" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString();///////////Pro Rata Incentive
                                                    CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                }
                                            }


                                          

                                            //////////////Absent///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][10] = "U*X*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][11] = CrewGrid1.Rows[i].Cells[50].Value.ToString() + "*" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                }
                                            }
                                            ///////////////////////////////////////////

                                            //////////////Final Calc///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][18] = "(U-V-W)*Q";
                                                    CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();

                                                }
                                            }
                                            ///////////////////////////////////////////
                                        }
                                    }
                                }

                                ////////////////RDO////////////////////
                                if (i >= 11 && i <= 32)
                                {
                                    if (CrewGrid1.Rows[i].Cells[1].Value != null)
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                        {
                                            if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][4] = " ";///////////Pro Rata Incentive
                                                    CrewCalcData.Rows[Row2][5] = " ";///////////Pro Rata Incentive
                                                    CrewCalcData.Rows[Row2][6] = " ";///////////Pro Rata Incentive
                                                }
                                            }

                                          

                                            //////////////Absent///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][10] = "HB * (X" +"*"+ Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + ")/100";
                                                    CrewCalcData.Rows[Row2][11] = TotalHoleBS.ToString() + "(" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                }
                                            }
                                            ///////////////////////////////////////////


                                            /////////////////////RDO Hole Incentive//////////////////////////
                                            if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][13] = "(A/F)*(G/H)*Q";
                                                    CrewCalcData.Rows[Row2][14] = "(" + TotalHoleBS.ToString() + "/" + Convert.ToString(Math.Round(AvgRDO, 2)) + ")*(" + PosShiftsLbl.Text + "/" + CrewGrid1.Rows[i].Cells[48].Value.ToString() + ")*" + RDOLTI.ToString();
                                                    CrewCalcData.Rows[Row2][15] = "= " + CrewGrid1.Rows[i].Cells[55].Value.ToString();
                                                }
                                            }

                                            ////////////////////////////////////////////////////////////////

                                            /////////////////////RDO  Incentive//////////////////////////
                                            if (Convert.ToDouble(TotalWPSqmLbl.Text) >= MyTarget)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                    {
                                                        CrewCalcData.Rows[Row2][16] = "(A/F*1.6)*(G/H)*Q";
                                                        CrewCalcData.Rows[Row2][17] = "= " + CrewGrid1.Rows[i].Cells[56].Value.ToString();
                                                       

                                                    }
                                                }
                                            }
                                            else
                                            {
                                                CrewCalcData.Rows[Row2][16] = "Target not Achieved";
                                                CrewCalcData.Rows[Row2][17] = " = 0";
                                            }

                                            ////////////////////////////////////////////////////////////////

                                            //////////////Final Calc///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][18] = "E+L";
                                                    CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();

                                                }
                                            }
                                            ///////////////////////////////////////////


                                        }
                                    }
                                }
                                ///////////////////////////////////////

                                ////////////////RDO////////////////////
                                if (i >= 33 && i <= 64)
                                {
                                    if (CrewGrid1.Rows[i].Cells[1].Value != null)
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                        {
                                            if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][4] = ""; ///////////Pro Rata Incentive
                                                    CrewCalcData.Rows[Row2][5] = "";///////////Pro Rata Incentive
                                                    CrewCalcData.Rows[Row2][6] = "";///////////Pro Rata Incentive
                                                }
                                            }

                                            //////////////Absent///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][10] = "A*(X" + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 1).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][11] = TotalHoleBS.ToString() + "*(" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                }
                                            }
                                            ///////////////////////////////////////////

                                            /////////////////////RDO Hole Incentive//////////////////////////
                                            if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][13] = "(A/F)*(G/H)*Q";
                                                    CrewCalcData.Rows[Row2][14] = "(" + TotalHoleBS.ToString() + "/" + Convert.ToString(Math.Round(AvgRDO, 2)) + ")*(" + PosShiftsLbl.Text + "/" + CrewGrid1.Rows[i].Cells[48].Value.ToString() + ")*" + RDOLTI.ToString();
                                                    CrewCalcData.Rows[Row2][15] = "= " + CrewGrid1.Rows[i].Cells[55].Value.ToString();
                                                }
                                            }

                                            ////////////////////////////////////////////////////////////////

                                            /////////////////////RDO  Incentive//////////////////////////
                                            if (Convert.ToDouble(TotalWPSqmLbl.Text) >= MyTarget)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                    {
                                                        CrewCalcData.Rows[Row2][16] = "(A/F*1.6)*(G/H)*Q";
                                                        CrewCalcData.Rows[Row2][17] = "= " + CrewGrid1.Rows[i].Cells[56].Value.ToString();


                                                    }
                                                }
                                            }
                                            else
                                            {
                                                CrewCalcData.Rows[Row2][16] = "Target not Achieved";
                                                CrewCalcData.Rows[Row2][17] = " = 0";
                                            }

                                            ////////////////////////////////////////////////////////////////

                                            //////////////Final Calc///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][18] = "E+L";
                                                    CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();

                                                }
                                            }
                                            ///////////////////////////////////////////
                                        }
                                    }
                                }
                                ///////////////////////////////////////

                                ////////////////Other Stoping////////////////////
                                if (i >= 65 && i <= 96)
                                {
                                    if (CrewGrid1.Rows[i].Cells[1].Value != null)
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                        {
                                            if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                {
                                                    if ((rdbStoping.Checked == true) || (rdbZCrew.Checked == true) || (rdbRCrew.Checked == true) || (rdbDev.Checked == true))
                                                    {
                                                        CrewCalcData.Rows[Row2][4] = "(I+J)/H*G"; ///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][5] = "(" + TotalWPSqmLbl.Text.ToString() + "+" + TotalSweepsLbl.Text + ") /" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value.ToString();///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                    }
                                                    else
                                                    {
                                                        if (Convert.ToDouble(AvgEmpLbl.Text) <= Comp)
                                                        {
                                                            

                                                            CrewCalcData.Rows[Row2][4] = "I/H*G"; ///////////Pro Rata Incentive
                                                            CrewCalcData.Rows[Row2][5] = IncentiveSqmLbl.Text + "/" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value;
                                                            CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                        }
                                                        else
                                                        {

                                                           

                                                            CrewCalcData.Rows[Row2][4] = "((I/Avg Emp)*Comp)*(G/H)"; ///////////Pro Rata Incentive
                                                            CrewCalcData.Rows[Row2][5] = "((" +IncentiveSqmLbl.Text + "/" + AvgEmpLbl.Text + ")*" + Comp + ")*(" + CrewGrid1.Rows[i].Cells[48].Value + "/" + PosShiftsLbl.Text;
                                                            CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                        }
                                                    }
                                                }
                                            }


                                            //////////////Absent///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][10] = "U*X*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][11] = CrewGrid1.Rows[i].Cells[50].Value.ToString() + "*" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                }
                                            }
                                            ///////////////////////////////////////////

                                            //////////////Final Calc///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][18] = "(U-V-W)*Q";
                                                    CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();

                                                }
                                            }
                                            ///////////////////////////////////////////
                                        }
                                    }
                                }
                                ///////////////////////////////////////

                                ////////////////Other Stoping////////////////////
                                if (i >= 111 && i <= 142)//////////////Other Stoping Night Shift
                                {
                                    if (CrewGrid1.Rows[i].Cells[1].Value != null)
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                        {
                                            if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[58].Value.ToString() == "Loader Driver")
                                                    {
                                                        CrewCalcData.Rows[Row2][4] = "(I+J)/H*G *" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString(); ///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][5] = "(" + TotalWPSqmLbl.Text.ToString() + "+" + TotalSweepsLbl.Text + ") /" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value.ToString()+ "*" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString();///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                    }
                                                    else
                                                    {
                                                        CrewCalcData.Rows[Row2][4] = "(I+J)/H*G"; ///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][5] = "(" + TotalWPSqmLbl.Text.ToString() + "+" + TotalSweepsLbl.Text + ") /" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value.ToString();///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                    }
                                                }
                                            }

                                            //////////////Absent///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][10] = "U*X*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][11] = CrewGrid1.Rows[i].Cells[50].Value.ToString() + "*" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                }
                                            }
                                            ///////////////////////////////////////////

                                            //////////////Final Calc///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][18] = "(U-V-W)*Q";
                                                    CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();

                                                }
                                            }
                                            ///////////////////////////////////////////
                                        }
                                    }
                                }
                                ///////////////////////////////////////

                                Row2 = Row2 + 1;
                            }
                        }
                    }
                }
                else
                {

                    if (CrewGrid1.Rows[i].Cells[1].Value != null)
                    {
                        if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                        {
                            if (CrewGrid1.Rows[i].Cells[59].Value != null)
                            {
                                if (CrewGrid1.Rows[i].Cells[59].Value.ToString() == "Y")
                                {
                                    CrewCalcData.Rows.Add();
                                    CrewCalcData.Rows[Row2][0] = CrewGrid1.Rows[i].Cells[0].Value;
                                    CrewCalcData.Rows[Row2][1] = CrewGrid1.Rows[i].Cells[1].Value;
                                    CrewCalcData.Rows[Row2][2] = CrewGrid1.Rows[i].Cells[48].Value;
                                    CrewCalcData.Rows[Row2][3] = CrewGrid1.Rows[i].Cells[49].Value;

                                    if (i >= 0 && i <= 10)
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value != null)
                                        {
                                            if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                            {
                                                CrewCalcData.Rows[Row2][4] = "(I+J)/H*G*+" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString(); ///////////Pro Rata Incentive;
                                                CrewCalcData.Rows[Row2][5] = "(" + TotalWPSqmLbl.Text.ToString() + "+" + TotalSweepsLbl.Text + ") /" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value.ToString() + "*" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString();///////////Pro Rata Incentive
                                                CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                            }

                                            //////////////Absent///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][10] = "U*X*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][11] = CrewGrid1.Rows[i].Cells[50].Value.ToString() + "*" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                }
                                            }
                                            ///////////////////////////////////////////

                                            //////////////Final Calc///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][18] = "(U-V-W)*Q";
                                                    CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();

                                                }
                                            }
                                            ///////////////////////////////////////////
                                        }


                                    }

                                    if (i >= 99 && i <= 110) ///////////////// TL NightShift
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value != null)
                                        {
                                            if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                            {
                                                CrewCalcData.Rows[Row2][4] = "(I+J)/H*G*+" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString(); ///////////Pro Rata Incentive
                                                CrewCalcData.Rows[Row2][5] = "(" + TotalWPSqmLbl.Text.ToString() + "+" + TotalSweepsLbl.Text + ") /" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value.ToString() + "*" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString();///////////Pro Rata Incentive
                                                CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                            }


                                            //////////////Absent///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][10] = "U*X*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][11] = CrewGrid1.Rows[i].Cells[50].Value.ToString() + "*" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                }
                                            }
                                            ///////////////////////////////////////////

                                            //////////////Final Calc///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][18] = "(U-V-W)*Q";
                                                    CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();

                                                }
                                            }
                                            ///////////////////////////////////////////
                                        }
                                    }

                                    ////////////////RDO////////////////////
                                    if (i >= 11 && i <= 32)
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value != null)
                                        {
                                            if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                    {
                                                        CrewCalcData.Rows[Row2][4] = " ";///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][5] = " ";///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][6] = " ";///////////Pro Rata Incentive
                                                    }
                                                }

                                                //////////////Absent///////////////////////

                                                if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                    {
                                                        CrewCalcData.Rows[Row2][10] = "A*(X" + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 1).ToString() + "/100";
                                                        CrewCalcData.Rows[Row2][11] = TotalHoleBS.ToString() + "*(" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                        CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                    }
                                                }
                                                ///////////////////////////////////////////

                                                /////////////////////RDO Hole Incentive//////////////////////////
                                                if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                    {
                                                        CrewCalcData.Rows[Row2][13] = "(A/F)*(G/H)*Q";
                                                        CrewCalcData.Rows[Row2][14] = "(" + TotalHoleBS.ToString() + "/" + Convert.ToString(Math.Round(AvgRDO, 2)) + ")*(" + PosShiftsLbl.Text + "/" + CrewGrid1.Rows[i].Cells[48].Value.ToString() + ")*" + RDOLTI.ToString();
                                                        CrewCalcData.Rows[Row2][15] = "= " + CrewGrid1.Rows[i].Cells[55].Value.ToString();
                                                    }
                                                }

                                                ////////////////////////////////////////////////////////////////

                                                /////////////////////RDO  Incentive//////////////////////////
                                                if (Convert.ToDouble(TotalWPSqmLbl.Text) >= MyTarget)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                                    {
                                                        if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                        {
                                                            CrewCalcData.Rows[Row2][16] = "(A/F*1.6)*(G/H)*Q";
                                                            CrewCalcData.Rows[Row2][17] = "= " + CrewGrid1.Rows[i].Cells[56].Value.ToString();


                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    CrewCalcData.Rows[Row2][16] = "Target not Achieved";
                                                    CrewCalcData.Rows[Row2][17] = " = 0";
                                                }

                                                ////////////////////////////////////////////////////////////////

                                                //////////////Final Calc///////////////////////

                                                if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                    {
                                                        CrewCalcData.Rows[Row2][18] = "E+L";
                                                        CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();

                                                    }
                                                }
                                                ///////////////////////////////////////////
                                            }
                                        }
                                    }
                                    ///////////////////////////////////////

                                    ////////////////RDO////////////////////
                                    if (i >= 33 && i <= 64)
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value != null)
                                        {
                                            if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                    {
                                                        CrewCalcData.Rows[Row2][4] = ""; ///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][5] = "";///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][6] = "";///////////Pro Rata Incentive
                                                    }
                                                }

                                                //////////////Absent///////////////////////

                                                if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                    {
                                                        CrewCalcData.Rows[Row2][10] = "HB * (X" + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                        CrewCalcData.Rows[Row2][11] = TotalHoleBS.ToString() + "(" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                        CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                    }
                                                }
                                                ///////////////////////////////////////////

                                                /////////////////////RDO Hole Incentive//////////////////////////
                                                if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                    {

                                                        CrewCalcData.Rows[Row2][13] = "(A/F)*(G/H)*Q";
                                                        CrewCalcData.Rows[Row2][14] = "(" + TotalHoleBS.ToString() + "/" + Convert.ToString(Math.Round(AvgRDO,2)) + ")*(" + PosShiftsLbl.Text + "/" + CrewGrid1.Rows[i].Cells[48].Value.ToString() + ")*" + RDOLTI.ToString();
                                                        CrewCalcData.Rows[Row2][15] = "= " + CrewGrid1.Rows[i].Cells[55].Value.ToString();
                                                    }
                                                }

                                                ////////////////////////////////////////////////////////////////

                                                /////////////////////RDO  Incentive//////////////////////////
                                                if (Convert.ToDouble(TotalWPSqmLbl.Text) >= MyTarget)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                                    {
                                                        if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                        {
                                                            CrewCalcData.Rows[Row2][16] = "(A/F*1.6)*(G/H)*Q";
                                                            CrewCalcData.Rows[Row2][17] = "= " + CrewGrid1.Rows[i].Cells[56].Value.ToString();


                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    CrewCalcData.Rows[Row2][16] = "Target not Achieved";
                                                    CrewCalcData.Rows[Row2][17] = " = 0";
                                                }

                                                ////////////////////////////////////////////////////////////////

                                                //////////////Final Calc///////////////////////

                                                if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                    {
                                                        CrewCalcData.Rows[Row2][18] = "E+L";
                                                        CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();

                                                    }
                                                }
                                                ///////////////////////////////////////////
                                            }
                                        }
                                    }
                                    ///////////////////////////////////////

                                    

                                    ////////////////Other Stoping////////////////////
                                    if (i >= 65 && i <= 96)
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value != null)
                                        {
                                            if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                            {
                                                if (CrewGrid1.Rows[i].Cells[48].Value != null)
                                                {
                                                    if (CrewGrid1.Rows[i].Cells[48].Value.ToString() != "")
                                                    {
                                                        if ((rdbStoping.Checked == true) || (rdbZCrew.Checked == true) || (rdbRCrew.Checked == true) || (rdbDev.Checked == true))
                                                        {
                                                            CrewCalcData.Rows[Row2][4] = "(I+J)/H*G"; ///////////Pro Rata Incentive
                                                            CrewCalcData.Rows[Row2][5] = "(" + TotalWPSqmLbl.Text.ToString() + "+" + TotalSweepsLbl.Text + ") /" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value.ToString();///////////Pro Rata Incentive
                                                            CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                        }
                                                        else
                                                        {
                                                            if (Convert.ToDouble(AvgEmpLbl.Text) <= Comp)
                                                            {


                                                                CrewCalcData.Rows[Row2][4] = "I/H*G"; ///////////Pro Rata Incentive
                                                                CrewCalcData.Rows[Row2][5] = IncentiveSqmLbl.Text + "/" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value;
                                                                CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                            }
                                                            else
                                                            {



                                                                CrewCalcData.Rows[Row2][4] = "((I/Avg Emp)*Comp)*(G/H)"; ///////////Pro Rata Incentive
                                                                CrewCalcData.Rows[Row2][5] = "((" + IncentiveSqmLbl.Text + "/" + AvgEmpLbl.Text + ")*" + Comp + ")*(" + CrewGrid1.Rows[i].Cells[48].Value + "/" + PosShiftsLbl.Text;
                                                                CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                            }
                                                        }
                                                    }
                                                }
                                                //CrewCalcData.Rows[Row2][4] = "(I+J)/H*G"; ///////////Pro Rata Incentive
                                                //if (CrewGrid1.Rows[i].Cells[48].Value == null)
                                                //{
                                                //    CrewGrid1.Rows[i].Cells[48].Value = "0";
                                                //}
                                                //CrewCalcData.Rows[Row2][5] = "(" + TotalWPSqmLbl.Text.ToString() + "+" + TotalSweepsLbl.Text + ") /" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value.ToString();///////////Pro Rata Incentive
                                                //CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                            }

                                            //////////////Absent///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][10] = "U*X*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][11] = CrewGrid1.Rows[i].Cells[50].Value.ToString() + "*" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                }
                                            }
                                            ///////////////////////////////////////////

                                            //////////////Final Calc///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][18] = "(U-V-W)*Q";
                                                    CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();

                                                }
                                            }
                                            ///////////////////////////////////////////
                                        }
                                    }
                                    ///////////////////////////////////////

                                    ////////////////Other Stoping////////////////////
                                    if (i >= 111 && i <= 142)//////////////Other Stoping Night Shift
                                    {
                                        if (CrewGrid1.Rows[i].Cells[1].Value != null)
                                        {
                                            if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                                            {
                                                 if (CrewGrid1.Rows[i].Cells[58].Value.ToString() == "Loader Driver")
                                                    {
                                                        CrewCalcData.Rows[Row2][4] = "(I+J)/H*G *" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString(); ///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][5] = "(" + TotalWPSqmLbl.Text.ToString() + "+" + TotalSweepsLbl.Text + ") /" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value.ToString() + "*" + Math.Round(Convert.ToDouble(TeamLeaderBonusLbl.Text), 2).ToString();///////////Pro Rata Incentive
                                                        CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                    }
                                                    else
                                                    {

                                                        if (CrewGrid1.Rows[i].Cells[48].Value == null)
                                                        {
                                                            CrewGrid1.Rows[i].Cells[48].Value = 0;
                                                        }
                                                            CrewCalcData.Rows[Row2][4] = "(I+J)/H*G"; ///////////Pro Rata Incentive
                                                            CrewCalcData.Rows[Row2][5] = "(" + TotalWPSqmLbl.Text.ToString() + "+" + TotalSweepsLbl.Text + ") /" + PosShiftsLbl.Text + "*" + CrewGrid1.Rows[i].Cells[48].Value.ToString();///////////Pro Rata Incentive
                                                            CrewCalcData.Rows[Row2][6] = "= " + CrewGrid1.Rows[i].Cells[50].Value;///////////Pro Rata Incentive
                                                        
                                                    }
                                            }

                                            //////////////Absent///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[49].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[49].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][10] = "U*X*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][11] = CrewGrid1.Rows[i].Cells[50].Value.ToString() + "*" + CrewGrid1.Rows[i].Cells[49].Value.ToString() + "*" + Math.Round(Convert.ToDecimal(AbscentBonusLbl.Text), 2).ToString() + "/100";
                                                    CrewCalcData.Rows[Row2][12] = "= " + CrewGrid1.Rows[i].Cells[52].Value.ToString();
                                                }
                                            }
                                            ///////////////////////////////////////////

                                            //////////////Final Calc///////////////////////

                                            if (CrewGrid1.Rows[i].Cells[57].Value != null)
                                            {
                                                if (CrewGrid1.Rows[i].Cells[57].Value.ToString() != "")
                                                {
                                                    CrewCalcData.Rows[Row2][18] = "(U-V-W)*Q";
                                                    CrewCalcData.Rows[Row2][19] = "=" + CrewGrid1.Rows[i].Cells[57].Value.ToString();

                                                }
                                            }
                                            ///////////////////////////////////////////
                                        }
                                    }
                                    ///////////////////////////////////////

                                    Row2 = Row2 + 1;
                                   
                                }
                            }


                        }


                    }
                }
            	
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////

               CrewData.TableName = "CalData";
               DataSet DsCalData = new DataSet();
               DsCalData.Tables.Add(CrewData);

               report.RegisterData(DsCalData);


               CrewCalcData.TableName = "CalDataCrew";
               DataSet DsCalCrewData = new DataSet();
               DsCalCrewData.Tables.Add(CrewCalcData);

               report.RegisterData(DsCalCrewData);

               WPData.TableName = "WPData";
               DataSet DsWPData = new DataSet();
               DsWPData.Tables.Add(WPData);

               report.RegisterData(DsWPData);

               ReportData.TableName = "ReportData";
               DataSet DsReportData = new DataSet();
               DsReportData.Tables.Add(ReportData);

               report.RegisterData(DsReportData);

               report.Load("CrewBonus.frx");

               //report.Design();

               pcReport.OutlineVisible = true;

               pcReport.Clear();
               report.Prepare();
               report.Preview = pcReport;
               report.ShowPrepared();









            


        }

        private void lbTransfer_SelectedIndexChanged(object sender, EventArgs e)
        {
           
        }

        private void lbPrinted_Click(object sender, EventArgs e)
        {
            //clear other list boxes and set lblOrgUnit 
            if (lbIncomplete.Items.Count > 0)
            {
                lbIncomplete.SetSelected(0, false);
            }
            if (lbTransfer.Items.Count > 0)
            {
                lbTransfer.SetSelected(0, false);
            }
            lblOrgunit.Text = lbPrinted.SelectedItem.ToString();

            DsLbl.Text = lbPrinted.SelectedItem.ToString();



            if (rdbStoping.Checked == true)
            {
                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = " select * from NorthamPas.dbo.survey where prodmonth = '" + ProdMonthTxt.Value + "' and  activitycode = 0 and orgunit = '" + DsLbl.Text + "' ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Stoping";
                _dbMan.ExecuteInstruction();

                if (_dbMan.ResultsDataTable.Rows.Count > 0)
                {

                    Sectionlbl.Text = _dbMan.ResultsDataTable.Rows[0]["Sectionid"].ToString();
                }
                else
                {
                    MessageBox.Show("Orgunit not found in survey database", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                if (DsLbl.Text.Substring(6, 1) == "M")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "N" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Substring(6, 1) == "U")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "P" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Length == 9)
                {
                    if (DsLbl.Text.Substring(7, 1) == "M")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "N" + DsLbl.Text.Substring(8, 1);
                    }

                    if (DsLbl.Text.Substring(7, 1) == "U")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "P" + DsLbl.Text.Substring(8, 1);
                    }
                }
            }

            if (rdbRCrew.Checked == true)
            {
                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = " select * from NorthamPas.dbo.survey where prodmonth = '" + ProdMonthTxt.Value + "' and  activitycode = 0 and orgunit = '" + DsLbl.Text + "' ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Stoping";
                _dbMan.ExecuteInstruction();

                Sectionlbl.Text = _dbMan.ResultsDataTable.Rows[0]["Sectionid"].ToString();


            }

            if (rdbZCrew.Checked == true)
            {
                Sectionlbl.Text = lblOrgunit.Text;

                if (DsLbl.Text.Substring(6, 1) == "M")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "N" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Substring(6, 1) == "U")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "P" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Length == 9)
                {
                    if (DsLbl.Text.Substring(7, 1) == "M")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "N" + DsLbl.Text.Substring(8, 1);
                    }

                    if (DsLbl.Text.Substring(7, 1) == "U")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "P" + DsLbl.Text.Substring(8, 1);
                    }
                }
            }

            if (rdbConstCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 5);
                NSLbl.Text = "NSLabel";
            }

            if (rdbXCCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }

            if (rdbDev.Checked == true)
            {
                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = " select * from NorthamPas.dbo.survey where prodmonth = '" + ProdMonthTxt.Value + "' and  activitycode = 1 and orgunit = '" + DsLbl.Text + "' ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Stoping";
                _dbMan.ExecuteInstruction();

                if (_dbMan.ResultsDataTable.Rows.Count > 0)
                {

                    Sectionlbl.Text = _dbMan.ResultsDataTable.Rows[0]["Sectionid"].ToString();
                }
                else
                {
                    MessageBox.Show("Orgunit not found in survey database", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                if (DsLbl.Text.Substring(6, 1) == "R")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "T" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Substring(6, 1) == "F")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "G" + DsLbl.Text.Substring(7, 1);
                }
            }

            if (rdbDevRailCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }

            if (rdbDevTransCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }

            if (rdbDevCleanCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }

            if (rdbDevConCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 5);
                NSLbl.Text = "NSLabel";
            }

        }

        private void lbIncomplete_Click(object sender, EventArgs e)
        {
            if (lbPrinted.Items.Count > 0)
            {
                lbPrinted.SetSelected(0, false);
            }
            if (lbTransfer.Items.Count > 0)
            {
                lbTransfer.SetSelected(0, false);
            }
            lblOrgunit.Text = lbIncomplete.SelectedItem.ToString();
            DsLbl.Text = lbIncomplete.SelectedItem.ToString();

            

            if (rdbStoping.Checked == true)
            {
                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = " select * from NorthamPas.dbo.survey where prodmonth = '" + ProdMonthTxt.Value + "' and  activitycode = 0 and orgunit = '" + DsLbl.Text + "' ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Stoping";
                _dbMan.ExecuteInstruction();

                if (_dbMan.ResultsDataTable.Rows.Count > 0)
                {

                    Sectionlbl.Text = _dbMan.ResultsDataTable.Rows[0]["Sectionid"].ToString();
                }
                else
                {
                    MessageBox.Show("Orgunit not found in survey database", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                if (DsLbl.Text.Substring(6, 1) == "M")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "N" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Substring(6, 1) == "U")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "P" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Length == 9)
                {
                    if (DsLbl.Text.Substring(7, 1) == "M")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "N" + DsLbl.Text.Substring(8, 1);
                    }

                    if (DsLbl.Text.Substring(7, 1) == "U")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "P" + DsLbl.Text.Substring(8, 1);
                    }
                }
            }

            if (rdbRCrew.Checked == true)
            {
                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = " select * from NorthamPas.dbo.survey where prodmonth = '" + ProdMonthTxt.Value + "' and  activitycode = 0 and orgunit = '" + DsLbl.Text + "' ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Stoping";
                _dbMan.ExecuteInstruction();

                Sectionlbl.Text = _dbMan.ResultsDataTable.Rows[0]["Sectionid"].ToString();

              
            }

            if (rdbZCrew.Checked == true)
            {
                Sectionlbl.Text = lblOrgunit.Text;

                if (DsLbl.Text.Substring(6, 1) == "M")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "N" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Substring(6, 1) == "U")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "P" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Length == 9)
                {
                    if (DsLbl.Text.Substring(7, 1) == "M")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "N" + DsLbl.Text.Substring(8, 1);
                    }

                    if (DsLbl.Text.Substring(7, 1) == "U")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "P" + DsLbl.Text.Substring(8, 1);
                    }
                }
            }

            if (rdbConstCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 5);
                NSLbl.Text = "NSLabel";
            }

            if (rdbXCCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }


            if (rdbDev.Checked == true)
            {
                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = " select * from NorthamPas.dbo.survey where prodmonth = '" + ProdMonthTxt.Value + "' and  activitycode = 1 and orgunit = '" + DsLbl.Text + "' ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Stoping";
                _dbMan.ExecuteInstruction();

                if (_dbMan.ResultsDataTable.Rows.Count > 0)
                {

                    Sectionlbl.Text = _dbMan.ResultsDataTable.Rows[0]["Sectionid"].ToString();
                }
                else
                {
                    MessageBox.Show("Orgunit not found in survey database", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                if (DsLbl.Text.Substring(6, 1) == "R")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "T" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Substring(6, 1) == "F")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "G" + DsLbl.Text.Substring(7, 1);
                }
            }

            if (rdbDevRailCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }

            if (rdbDevTransCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }

            if (rdbDevCleanCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }

            if (rdbDevConCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 5);
                NSLbl.Text = "NSLabel";
            }

        }

        private void lbTransfer_Click(object sender, EventArgs e)
        {
            //clear other list boxes and set lblOrgUnit
            if (lbIncomplete.Items.Count > 0)
            {
                lbIncomplete.SetSelected(0, false);
            }
            if (lbPrinted.Items.Count > 0)
            {
                lbPrinted.SetSelected(0, false);
            }
            lblOrgunit.Text = lbTransfer.SelectedItem.ToString();


            DsLbl.Text = lbTransfer.SelectedItem.ToString();

            AdjLbl.Text = "N";

            MWDataManager.clsDataAccess _dbManAdj = new MWDataManager.clsDataAccess();
            _dbManAdj.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
            _dbManAdj.SqlStatement = _dbManAdj.SqlStatement + " select case when TodayDate > MeasDate then 'Y' else 'N' end as LabelCaption from (  ";
            _dbManAdj.SqlStatement = _dbManAdj.SqlStatement + " select MAX(CalendarDate)+7 MeasDate, DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE()))  TodayDate from NorthamPas.dbo.PLANNING   ";
            _dbManAdj.SqlStatement = _dbManAdj.SqlStatement + " where Prodmonth = '" + ProdMonthTxt.Value + "'  ";
            _dbManAdj.SqlStatement = _dbManAdj.SqlStatement + " and SUBSTRING(SectionID,1,4) = '" + DsLbl.Text.Substring(0, 4) + "' )a  ";
            
            _dbManAdj.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
            _dbManAdj.queryReturnType = MWDataManager.ReturnType.DataTable;
            _dbManAdj.ResultsTableName = "Stoping";
            _dbManAdj.ExecuteInstruction();

            DataTable dt = _dbManAdj.ResultsDataTable;

            foreach (DataRow dr in dt.Rows)
            {
                AdjLbl.Text = dr["LabelCaption"].ToString();
            }


            if (rdbStoping.Checked == true)
            {
                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = " select * from NorthamPas.dbo.survey where prodmonth = '" + ProdMonthTxt.Value + "' and  activitycode = 0 and orgunit = '" + DsLbl.Text + "' ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Stoping";
                _dbMan.ExecuteInstruction();

                if (_dbMan.ResultsDataTable.Rows.Count > 0)
                {

                    Sectionlbl.Text = _dbMan.ResultsDataTable.Rows[0]["Sectionid"].ToString();
                }
                else
                {
                    MessageBox.Show("No Planning found","No Planning",MessageBoxButtons.OK,MessageBoxIcon.Error);
                    return;
                }

                if (DsLbl.Text.Substring(6, 1) == "M")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "N" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Substring(6, 1) == "U")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "P" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Length == 9)
                {
                    if (DsLbl.Text.Substring(7, 1) == "M")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "N" + DsLbl.Text.Substring(8, 1);
                    }

                    if (DsLbl.Text.Substring(7, 1) == "U")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "P" + DsLbl.Text.Substring(8, 1);
                    }
                }
            }

            if (rdbRCrew.Checked == true)
            {
                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = " select * from NorthamPas.dbo.survey where prodmonth = '" + ProdMonthTxt.Value + "' and  activitycode = 0 and orgunit = '" + DsLbl.Text + "' ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Stoping";
                _dbMan.ExecuteInstruction();

                 if (_dbMan.ResultsDataTable.Rows.Count > 0)
                {

                    Sectionlbl.Text = _dbMan.ResultsDataTable.Rows[0]["Sectionid"].ToString();
                }
                else
                {
                    MessageBox.Show("No Planning found", "No Planning", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }


            }

            //if (rdbZCrew.Checked == true)
            //{
            //    Sectionlbl.Text = lblOrgunit.Text;

            //    if (DsLbl.Text.Substring(6, 1) == "M")
            //    {
            //        NSLbl.Text = DsLbl.Text.Substring(0, 6) + "N" + DsLbl.Text.Substring(7, 1);
            //    }

            //    if (DsLbl.Text.Substring(6, 1) == "U")
            //    {
            //        NSLbl.Text = DsLbl.Text.Substring(0, 6) + "P" + DsLbl.Text.Substring(7, 1);
            //    }
            //}

            //if (rdbConstCrew.Checked == true)
            //{
            //    Sectionlbl.Text = DsLbl.Text.Substring(1, 4);
            //    NSLbl.Text = "NSLabel";
            //}

            //if (rdbXCCrew.Checked == true)
            //{
            //    Sectionlbl.Text = DsLbl.Text.Substring(1, 4);
            //    NSLbl.Text = "NSLabel";
            //}



            if (rdbZCrew.Checked == true)
            {
                Sectionlbl.Text = lblOrgunit.Text;

                if (DsLbl.Text.Substring(6, 1) == "M")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "N" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Substring(6, 1) == "U")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "P" + DsLbl.Text.Substring(7, 1);
                }

                if (DsLbl.Text.Length == 9)
                {
                    if (DsLbl.Text.Substring(7, 1) == "M")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "N" + DsLbl.Text.Substring(8, 1);
                    }

                    if (DsLbl.Text.Substring(7, 1) == "U")
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 7) + "P" + DsLbl.Text.Substring(8, 1);
                    }
                }
            }

            if (rdbConstCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 5);
                NSLbl.Text = "NSLabel";
            }

            if (rdbXCCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }

            if (rdbDev.Checked == true)
            {
                MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                _dbMan.SqlStatement = " select * from NorthamPas.dbo.survey where prodmonth = '" + ProdMonthTxt.Value + "' and  activitycode = 1 and orgunit = '" + DsLbl.Text + "' ";
                _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                _dbMan.ResultsTableName = "Stoping";
                _dbMan.ExecuteInstruction();

                if (_dbMan.ResultsDataTable.Rows.Count > 0)
                {

                    Sectionlbl.Text = _dbMan.ResultsDataTable.Rows[0]["Sectionid"].ToString();
                }
                else
                {
                    MessageBox.Show("Orgunit not found in survey database", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                if (DsLbl.Text.Substring(6, 1) == "R")
                {
                    if (DsLbl.Text.Length > 8)
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 6) + "T" + DsLbl.Text.Substring(7, 2);
                    }
                    else
                    {
                        NSLbl.Text = DsLbl.Text.Substring(0, 6) + "T" + DsLbl.Text.Substring(7, 1);
                    }
                }

                if (DsLbl.Text.Substring(6, 1) == "F")
                {
                    NSLbl.Text = DsLbl.Text.Substring(0, 6) + "G" + DsLbl.Text.Substring(7, 1);
                }
            }

            if (rdbDevRailCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }

            if (rdbDevTransCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }

            if (rdbDevCleanCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 4);
                NSLbl.Text = "NSLabel";
            }

            if (rdbDevConCrew.Checked == true)
            {
                Sectionlbl.Text = DsLbl.Text.Substring(0, 5);
                NSLbl.Text = "NSLabel";
            }

        }

        private void Close1Btn_Click_1(object sender, EventArgs e)
        {
            this.Close();
        }

        private void rdbZCrew_CheckedChanged(object sender, EventArgs e)
        {
            LoadListBoxes();
        }

        private void rdbConstCrew_CheckedChanged(object sender, EventArgs e)
        {
            if (rdbConstCrew.Checked == true)
            {
                LoadListBoxes();
            }
        }

        private void rdbXCCrew_CheckedChanged(object sender, EventArgs e)
        {
            LoadListBoxes();
        }

        private void rdbDev_CheckedChanged(object sender, EventArgs e)
        {
            LoadListBoxes();
        }

        private void rdbDevRailCrew_Click(object sender, EventArgs e)
        {
            LoadListBoxes();
        }

      

        private void rdbDevTransCrew_CheckedChanged(object sender, EventArgs e)
        {
            if (rdbDevTransCrew.Checked == true)
            {
                LoadListBoxes();
            }

        }

        private void rdbDevCleanCrew_CheckedChanged(object sender, EventArgs e)
        {
            if (rdbDevCleanCrew.Checked == true)
            {
                LoadListBoxes();
            }
        }

        private void redDevConCrew_CheckedChanged(object sender, EventArgs e)
        {
            if (rdbDevConCrew.Checked == true)
            {
                LoadListBoxes();
            }
        }


        DialogResult result;

        int RI = 0;
        int LTI = 0;
        int Fatal = 0;

        private void simpleButton1_Click(object sender, EventArgs e)
        {
              result = MessageBox.Show("Are you sure you want to transfer the Bonus Details to the ARMS Interface?", "Transfer Record", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);

              if (result == DialogResult.Yes)
              {
                  MWDataManager.clsDataAccess _dbMan = new MWDataManager.clsDataAccess();
                  _dbMan.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                  _dbMan.SqlStatement = _dbMan.SqlStatement + " select * from BMCS_ARMS_Interface_TransferNew  ";
                  _dbMan.SqlStatement = _dbMan.SqlStatement + " Where OrgUnit = '"+DsLbl.Text+"' ";
                  _dbMan.SqlStatement = _dbMan.SqlStatement + " and ProdMonth = '"+ProdMonthTxt.Value+"' ";
                  _dbMan.SqlStatement = _dbMan.SqlStatement + " and Transferred = 'Y'  ";
                  _dbMan.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                  _dbMan.queryReturnType = MWDataManager.ReturnType.DataTable;
                  _dbMan.ResultsTableName = "Stoping";
                  _dbMan.ExecuteInstruction();

                  if (_dbMan.ResultsDataTable.Rows.Count > 0)
                  {
                      MessageBox.Show("This Orgunit has already been transfered", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                  }

                  MWDataManager.clsDataAccess _dbMandelete = new MWDataManager.clsDataAccess();
                  _dbMandelete.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];
                  _dbMandelete.SqlStatement = _dbMandelete.SqlStatement + " Delete BMCS_ARMS_Interface_TransferNew ";
                  _dbMandelete.SqlStatement = _dbMandelete.SqlStatement + " Where OrgUnit = '" + DsLbl.Text + "' ";
                  _dbMandelete.SqlStatement = _dbMandelete.SqlStatement + " and ProdMonth =  '" + ProdMonthTxt.Value + "' ";
                  _dbMandelete.SqlStatement = _dbMandelete.SqlStatement + " and Transferred <> 'Y' ";
                  
                 
                  _dbMandelete.SqlStatement = _dbMandelete.SqlStatement + " Delete BMCS_ARMS_Interface_TransferNew ";
                  _dbMandelete.SqlStatement = _dbMandelete.SqlStatement + " Where OrgUnit = '" + NSLbl.Text + "' ";
                  _dbMandelete.SqlStatement = _dbMandelete.SqlStatement + " and ProdMonth =  '" + ProdMonthTxt.Value + "' ";
                  _dbMandelete.SqlStatement = _dbMandelete.SqlStatement + " and Transferred <> 'Y' ";

                  _dbMandelete.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                  _dbMandelete.queryReturnType = MWDataManager.ReturnType.DataTable;
                  _dbMandelete.ResultsTableName = "Stoping";
                  _dbMandelete.ExecuteInstruction();

                  MWDataManager.clsDataAccess _dbManInsert = new MWDataManager.clsDataAccess();
                  _dbManInsert.ConnectionString = ConfigurationSettings.AppSettings["SQLConnectionStr"];

                  RI = Convert.ToInt16(DSRiLbl.Text) + Convert.ToInt16(NSRiLbl.Text);
                  LTI = Convert.ToInt16(DSLtiSafeLbl.Text) + Convert.ToInt16(NSLtiSafeLbl.Text);
                  Fatal = Convert.ToInt16(DSFatalLbl.Text) + Convert.ToInt16(NSFatalLbl.Text);

                  for (int i = 0; i <= CrewGrid1.Rows.Count - 1; i++)
                  {
                      if (CrewGrid1.Rows[i].Cells[1].Value != null)
                      {
                          if (CrewGrid1.Rows[i].Cells[1].Value.ToString() != "")
                          {

                              _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " Insert into BMCS_ARMS_Interface_TransferNew ";
                              _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " (id, TimeStamp, ProdMonth, ActivityCode, IndustryNumber, Initials,  Surname, Category, OrgUnit, Shift, Workplace, ";
                              _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " PasNumber, Gross_Amount, WorkingShifts, AWOPS, Element, RI, LTI, ";
                              _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " Non_PU_LTI, PhysicalCondition, Nett_Amount, Type, Transferred, Holes, FinPay) values ";

                              _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + "( '1', '" + DateTime.Now + "', '" + ProdMonthTxt.Value + "', ";

                              if (rdbDev.Checked == true)
                              {
                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '1', ";
                              }
                              else
                              {
                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '0', ";
                              }

                              _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '" + CrewGrid1.Rows[i].Cells[1].Value + "', '" + CrewGrid1.Rows[i].Cells[62].Value + "', '" + CrewGrid1.Rows[i].Cells[61].Value + "', ";


                              ///////////////////////////////Team Leader/////////////////////////////////////////////
                              if (i <= 11)
                              {
                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Team Leader', ";

                                  if (rdbDev.Checked != true)
                                  {
                                      _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Special Team Leader Stoping Bonus', ";
                                  }
                                  else
                                  {
                                      _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Special Team Leader Development Bonus', ";
                                  }

                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '"+DsLbl.Text+"', 'D' ";

                              }

                              ////////////////////////////////////////////////////////////////////////////////////////////

                              ///////////////////////////////RDO/////////////////////////////////////////////
                              if ((i > 11) && (i <= 65))
                              {
                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Mach. Oper.(RDO)', ";

                                  if (rdbDev.Checked != true)
                                  {
                                      _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Machine Operator Stoping Bonus', ";
                                  }
                                  else
                                  {
                                      _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Machine Operator Development Bonus', ";
                                  }

                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '" + DsLbl.Text + "', 'D' ";

                              }

                              ////////////////////////////////////////////////////////////////////////////////////////////

                              ///////////////////////////////Other Stoping/////////////////////////////////////////////
                              if ((i > 65) && (i <= 97))
                              {
                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Other Stoping', ";

                                  if (rdbDev.Checked != true)
                                  {
                                      _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Production Unit Stoping Bonus', ";
                                  }
                                  else
                                  {
                                      _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Production Unit Development Bonus', ";
                                  }

                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '" + DsLbl.Text + "', 'D' ";

                              }

                              ////////////////////////////////////////////////////////////////////////////////////////////

                              ///////////////////////////////Team Leader NS /////////////////////////////////////////////
                              if ((i > 99) && (i <= 111))
                              {
                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Team Leader', ";

                                  if (rdbDev.Checked != true)
                                  {
                                      _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Special Team Leader Stoping Bonus', ";
                                  }
                                  else
                                  {
                                      _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Special Team Leader Development Bonus', ";
                                  }

                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '" + DsLbl.Text + "', 'N' ";

                              }

                              ////////////////////////////////////////////////////////////////////////////////////////////

                              ///////////////////////////////Other Stoping NS/////////////////////////////////////////////
                              if ((i > 111) && (i <= 143))
                              {
                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Other Stoping', ";

                                  if (rdbDev.Checked != true)
                                  {
                                      _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Production Unit Stoping Bonus', ";
                                  }
                                  else
                                  {
                                      _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " 'Production Unit Development Bonus', ";
                                  }

                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '" + DsLbl.Text + "', 'N', ";

                              }

                              ////////////////////////////////////////////////////////////////////////////////////////////
                              if ((rdbDev.Checked == true) || (rdbStoping.Checked == true))
                              {
                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '"+description+"','"+Workplaceid+"', ";
                              }
                              else
                              {
                                  _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '','',  ";
                              }

                              _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '" + CrewGrid1.Rows[i].Cells[50].Value + "', '" + CrewGrid1.Rows[i].Cells[48].Value + "', '" + CrewGrid1.Rows[i].Cells[49].Value + "',   "; //// Pro Rata, Worked shifts,AWOPS
                              _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '" + RI + "', '" + LTI + "', '" + Fatal + "', '0', '" + CrewGrid1.Rows[i].Cells[57].Value + "',   ";
                              _dbManInsert.SqlStatement = _dbMandelete.SqlStatement + " '28', '" + CrewGrid1.Rows[i].Cells[55].Value + "', '" + CrewGrid1.Rows[i].Cells[56].Value + "', '"+ProdMonthTxt.Value+"' ";

                          }

                          _dbManInsert.queryExecutionType = MWDataManager.ExecutionType.GeneralSQLStatement;
                          _dbManInsert.queryReturnType = MWDataManager.ReturnType.DataTable;
                          _dbManInsert.ResultsTableName = "Stoping";
                          _dbManInsert.ExecuteInstruction();
                      }
                  }

              }
        }

        
    }
}
